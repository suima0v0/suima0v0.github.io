<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suima&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-19T11:11:41.381Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SuiMa_黃志強</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于中西方文明发展逻辑的简明梳理</title>
    <link href="http://yoursite.com/2019/10/19/%E5%85%B3%E4%BA%8E%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E6%98%8E%E5%8F%91%E5%B1%95%E9%80%BB%E8%BE%91%E7%9A%84%E7%AE%80%E6%98%8E%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2019/10/19/关于中西方文明发展逻辑的简明梳理/</id>
    <published>2019-10-18T16:00:00.000Z</published>
    <updated>2019-10-19T11:11:41.381Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要观点来源于金灿荣老师于港大的《风云变幻下的中美关系与世界格局》讲座、于观天下讲坛的《未来10年的世界大变局》讲座，以及温铁军老师于人大的《东西方文明的不同和对西方灌输给东方的观念的反思》讲座整理，并在论据部分作补充。（针对文章第二部分所述的中世纪人文情况，可通过动画「狼与香辛料」、「海盗战记」以及游戏「巫师三」等较为形象地了解）</p>
<h3 id="古代中国文明的产生及发展"><a href="#古代中国文明的产生及发展" class="headerlink" title="古代中国文明的产生及发展"></a>古代中国文明的产生及发展</h3><p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80b885kacj20hs0ci75j.jpg" alt="img"></p>
<p><strong>中国的农业发展起源于四川盆地水稻种植</strong>，四川盆地地势平坦，是热带季风气候，受到太平洋与印度洋夏季风的水汽滋润，形成丰富降水，天然适宜水稻生长。</p>
<p>但由于四川盆地地势较低，大江大河多流经此地，加上夏季青藏高原冰雪融化与降水频繁，所以此地必然是洪涝灾害严重地区。这也导致了，<strong>中国的农耕文明，必然起源于水利灌溉模式下的村社文明</strong>。大禹治水便有所揭示，谁最懂治水，谁便是该文明下的最高领导人。以疏代堵也作为中国哲学影响至今。</p>
<p>因此村社模式中的几大生产特征，奠定了中华民族与西方世界不同的价值观与主要行为基础：</p>
<ol>
<li><p>家庭是基本的生产单位，而温饱问题需要大量人力耕作，所以<strong>农耕时代家庭对生孩子的数量有着严格的KPI考核指标，所以有“不孝有三无后为大”</strong>。</p>
<a id="more"></a>
</li>
<li><p>土地是基本的生产资料，所以中国是不认神的，只认土地，只为土地打架。<strong>抢了土地生了孩子之后就要在家耕地，所以就有“父母在，不远游”的孝道文化</strong>。所以中国的刑罚就是流放三千里，让你死后不能跟父母一起，永远是孤魂野鬼，对中国人来说很凄惨，宁愿割头也不去。</p>
</li>
<li><p>中国家庭儿子女儿多，必然会产生矛盾，<strong>所以中国传统的财产继承制必然是所有孩子平分家产，所以必然会产生“君君臣臣父父子子”的伦理约束</strong>。</p>
</li>
<li><p>农业耕作收到气候影响，时效性强。所以必然要求在有限时间内，集中人力共同劳作，中国自古强调集体意识，加之中国地大物博，<strong>这也是战国的杨朱学派与五四运动所代表个人主义思潮无法完成统一中国思想的历史使命的原因</strong>。</p>
</li>
</ol>
<h3 id="古代西方国家海洋文明的产生及发展"><a href="#古代西方国家海洋文明的产生及发展" class="headerlink" title="古代西方国家海洋文明的产生及发展"></a>古代西方国家海洋文明的产生及发展</h3><p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80b8hluycj20g00esjsf.jpg" alt="Image result for 希腊文明 地图"></p>
<p>西方文明诞生于古希腊，其特殊的地理环境是塑造欧洲文化的重要原因。</p>
<p>欧洲平原破碎，土地贫瘠，不能生产小麦稻米等，所以粮食短缺；而因阳光充足，能种植高附加值的橄榄油，葡萄等；他们只能通过海路卖到亚细亚与北非交换粮食。<strong>地理形态决定商业形态，商业形态决定文化形态，这也决定了西方文明的本质是交易文化</strong>。贸易的发展还必然会带来法制的发展，因为双方不认识，贸易需要双方达成契约以保护贸易的有效性。同时，由于航海的物质条形难以估算，物理不确定性多，所以不许信一个神，在精神上保持确定性，古希腊出海前就要祭祀一下神（波塞冬）。另外，西方古代以采集狩猎为主，采集与狩猎需要强壮的身体，所以西方个人主义盛行，崇尚英雄主义。</p>
<p>因为商业交换强调大本金，本金充足才能增加利润，<strong>所以家庭财富不可分割，西方只能是长子继承制，土地有限，二子三子只能去海外殖民</strong>。在公元1453年，土耳其的奥斯曼帝国崛起，更是阻断了南北两条丝绸之路以及红海到地中海的贸易运输，这对中国无所谓，但对西方就阻断了经济来源。由于贸易，西方只能向西向南开辟海上贸易路线，开启大航海时代。</p>
<p><strong>大航海时代的地理大发现，也是西方文明对东方领先的开始</strong>。犹豫东欧被奥斯曼帝国垄断，所以西方只能往西往南远航，哥伦布发现新大陆（美洲大陆），麦哲伦绕地球一周，发现地球是圆的，<strong>地理知识以及大航海所需要的几何学，科学等瞬间超越东方国家，并迅速拉开知识差距</strong>。随后不久，西方人迅速占领北美、南美、大洋洲与非洲，<strong>在自然资源上也瞬间超过东方国家，并完成了资本主义的原始积累</strong>。</p>
<h3 id="近代殖民→大机器制造→工业革命→民主的诞生"><a href="#近代殖民→大机器制造→工业革命→民主的诞生" class="headerlink" title="近代殖民→大机器制造→工业革命→民主的诞生"></a>近代殖民→大机器制造→工业革命→民主的诞生</h3><p>为什么西方世界能比东方农业社会更快速积累现代化所需的财富，原因有几点：</p>
<ol>
<li><p><strong>海洋文明的战争的结果是赢家通吃（Winner takes all.）</strong>。不同于东方国家打仗为了占有土地，输了也可以退守千里，割让领土；海洋舰队没有土地，输了的一方船只被摧毁，财富被掠夺，财富会迅速聚集到强者手中。而负面结果就是导致贫富差距。</p>
</li>
<li><p><strong>神学影响所带来的的奴隶制提供了大量优廉劳动力</strong>。西方讲究个人主义，但人仅限于同宗教信仰者，异教徒不配为人，所以奴隶制的传统一直为西方提供了免费的终身劳动力。如爱尔兰，土地优渥，人民以农业为主，战斗力一直较差，就多次被维京人、英国人等疯狂蹂躏。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80d2nscogj20gk09m400.jpg" alt="img"></p>
</li>
<li><p><strong>大航海时代殖民统治了世界绝大部分自然资源</strong>。比如英国，在全球七大洲都有它的殖民地，在英国的统治范围里不论何时都有领土处于白昼中，被称为“日不落帝国”。非洲，南美等世界各地的自然资源与奴隶被疯狂掠夺，组成了资本主义的原始积累。</p>
</li>
</ol>
<p>所以西方的工业革命是需求驱动的。<strong>大航海后西方世界控制的地盘是之前的11倍，但因西方的人口没增加，所以只能发展大机器提高生产力，随之经济效率与军事效率大幅领先东方</strong>。而西方民主也是来源于此。因为工业化，大机器制造，生产力需求量大，所以使得农村的人向城市聚集，基于经济需要<strong>城市化</strong>，而脱离乡村的个人的人生保护很弱，所以便<strong>民主化</strong>，前期的民主是捣乱的，所以需要完善，而后形成<strong>法制化</strong>。所以<strong>民主是工业化，城市化的产品，而不是前提</strong>。</p>
<h3 id="现代民间社会乱象的源头"><a href="#现代民间社会乱象的源头" class="headerlink" title="现代民间社会乱象的源头"></a>现代民间社会乱象的源头</h3><p><strong>民富差距是资本主义不断发展的天然产物，而中下阶层长期贫困且不可改变，就会长期不满，中下阶层长期不满就会出现民粹主义</strong>。在民粹主义出现之后，就会被资本势力或者政治势力利用，比如川普利用民粹上台，川普通过骂华尔街，骂富翁，骂出了美国贫困人民的心声，作为一个压迫工人的富翁，成功地成为了美国工人阶级的代表。香港，台湾的社会乱象亦是如是。</p>
<h5 id="私货"><a href="#私货" class="headerlink" title="私货"></a>私货</h5><p>在规则公平本身就是不公平的，同样的国际规则，但是由于体量不同，发展国家根本无法与发达国家同台竞技。同样的，看似公平的当代社会，却发生着很多令人啼笑皆非的现象：</p>
<ul>
<li>本国财阀最大的投资方是美国，本国不具备反抗驻扎美军的军事能力，财阀与政权民不可分，每一任想做出颠覆的总统都不得好下场。</li>
<li>企业家的亲属渗透到政治文化领域，地区无法产生能威胁财阀现有产业的先进新产业，外表上自称国际金融中心，却多次完美地拒绝以IT，生命科学等为代表的先进领域，高考前三甲的首选居然是牙医。</li>
<li>本国及企业家因为降低风险大量购入美元外汇，却随时遭受美国的贬值威胁。</li>
</ul>
<p>种种这样的情况与封建时代各朝走向覆灭的本质原因——土地兼并无本质上的区别，只不过是给人民披上了民主与自由的糖衣，本质上还是既得利益者不断蚕食无产阶级的社会价值。如今无法评价好坏，不过阿中同志现在走的这一条，真真是所有国家都没走过的道路。</p>
<p>Bon voyage.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要观点来源于金灿荣老师于港大的《风云变幻下的中美关系与世界格局》讲座、于观天下讲坛的《未来10年的世界大变局》讲座，以及温铁军老师于人大的《东西方文明的不同和对西方灌输给东方的观念的反思》讲座整理，并在论据部分作补充。（针对文章第二部分所述的中世纪人文情况，可通过动画「狼与香辛料」、「海盗战记」以及游戏「巫师三」等较为形象地了解）&lt;/p&gt;
&lt;h3 id=&quot;古代中国文明的产生及发展&quot;&gt;&lt;a href=&quot;#古代中国文明的产生及发展&quot; class=&quot;headerlink&quot; title=&quot;古代中国文明的产生及发展&quot;&gt;&lt;/a&gt;古代中国文明的产生及发展&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/b0fbd514gy1g80b885kacj20hs0ci75j.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中国的农业发展起源于四川盆地水稻种植&lt;/strong&gt;，四川盆地地势平坦，是热带季风气候，受到太平洋与印度洋夏季风的水汽滋润，形成丰富降水，天然适宜水稻生长。&lt;/p&gt;
&lt;p&gt;但由于四川盆地地势较低，大江大河多流经此地，加上夏季青藏高原冰雪融化与降水频繁，所以此地必然是洪涝灾害严重地区。这也导致了，&lt;strong&gt;中国的农耕文明，必然起源于水利灌溉模式下的村社文明&lt;/strong&gt;。大禹治水便有所揭示，谁最懂治水，谁便是该文明下的最高领导人。以疏代堵也作为中国哲学影响至今。&lt;/p&gt;
&lt;p&gt;因此村社模式中的几大生产特征，奠定了中华民族与西方世界不同的价值观与主要行为基础：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;家庭是基本的生产单位，而温饱问题需要大量人力耕作，所以&lt;strong&gt;农耕时代家庭对生孩子的数量有着严格的KPI考核指标，所以有“不孝有三无后为大”&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="学问" scheme="http://yoursite.com/tags/%E5%AD%A6%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>写在西装革履过年之后</title>
    <link href="http://yoursite.com/2019/02/22/%E5%86%99%E5%9C%A8%E8%A5%BF%E8%A3%85%E9%9D%A9%E5%B1%A5%E8%BF%87%E5%B9%B4%E4%B9%8B%E5%90%8E/"/>
    <id>http://yoursite.com/2019/02/22/写在西装革履过年之后/</id>
    <published>2019-02-21T16:00:00.000Z</published>
    <updated>2019-03-03T05:56:37.087Z</updated>
    
    <content type="html"><![CDATA[<p>如果没有这种小确幸，人生只不过是干巴巴的沙漠而已。<br>​                                                                                     </p><p align="right">—— 村上春树</p>    <p></p>
<p>5……4……3……2……1！新年快乐！那是春晚循例的倒数，是隔壁响起的鞭炮竹声，是纷至沓来的群发祝福提醒。整个中国都沉浸在新一年的喜庆中，至少，听起来确实如此。</p>
<p>不知道从什么时候开始，每年的这个时刻，心里突然会浮起一种名为<strong>「硌得慌」</strong>的情绪，不是疲惫于过年的种种繁琐，也不是担心各种亲戚长辈的问东问西。你一直想问，为什么别人对过年会那么期待，那么快乐。但其实，那个内心的幽灵真正想问的是：为什么<strong>你</strong>不像别人那样翘首以待，不像别人那样乐在其中？你很快便不愿深究，害怕与群体文化对抗，害怕心里慢慢失去社会性。</p>
<p>谁也不愿做那群快乐的绵羊中间那只皱眉的。</p>
<p> <img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkasnv7lj20go0as75h.jpg"></p>
<a id="more"></a>
<p>地球诞生之初并没有定义哪一刻是时间的分割线，各个国家对新年都有不同的定义，倘若我是国王，我会把新年定在<strong>冬天</strong>，迎接寒冷与苦难是多么具有浪漫主义的成就。如此看来，过年这个仪式对于王国来说还是有莫大的意义的。</p>
<p>过年也好，其他节日也好，于自然界而言毫无价值，仅仅是分割时间的虚线罢了。即便是生老病死这些对于生命而言如此重要的时刻，对于不解风情的自然界来说，也只是无序的随机序列而已。诚然，熵增是世界至高无上的自然规律，泼出去的水永远也不可能回到盆子里，事物的任何发展都是世界随着时间的流逝由秩序流向分散的过程。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkcce8szj20bo08j74a.jpg"></p>
<p>直到<strong>仪式</strong>的出现。</p>
<p>仪式的出现，是人类从自然界生物衍生出文明的标志。人类从无序的世界变迁中发现了感受与意义，生老病死、季节更迭等等在人类的感受力之下产生了新的意义。篝火的舞步，高亢的歌声，使人产生了区别于其他生物的精神力量，而这些精神力量，被编织成了<strong>浪漫</strong>的人类文明史诗。</p>
<p>仪式感，是一个略带矫情的词。但是正如《小王子》中的狐狸说到，“仪式感就是使某一天与其他日子不同，使某一时刻与其他时刻不同。” 我们大可不必成为羊群中的一员，但我们的一生中是否有某些独特的时刻，就像是天上的一颗星星，任由岁月流逝，你也一样可以很轻易地从回忆的夜幕里找到它，它若隐若现闪烁着的光芒，一定就是你与众不同的一生的意义所在。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkccehizj20go0ejq3m.jpg" alt="img"></p>
<p><strong>「</strong>Romantic<strong>」</strong>的解释是：<strong>富有诗意</strong>，<strong>充满幻想</strong>。仪式纪念的也应该是你充满诗意与幻想的时刻。西装革履过年的人，心里一定不是在过年。只要此刻的你是自由的、热情的，哪怕你穿着背心凉鞋去咖啡厅，也一定能找到属于你的仪式感。</p>
<p>因此，喝咖啡前，将杯子放到鼻子下嗅一下咖啡的香气，远比喝咖啡本身来得神圣。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果没有这种小确幸，人生只不过是干巴巴的沙漠而已。&lt;br&gt;​                                                                                     &lt;/p&gt;&lt;p align=&quot;right&quot;&gt;—— 村上春树&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;p&gt;5……4……3……2……1！新年快乐！那是春晚循例的倒数，是隔壁响起的鞭炮竹声，是纷至沓来的群发祝福提醒。整个中国都沉浸在新一年的喜庆中，至少，听起来确实如此。&lt;/p&gt;
&lt;p&gt;不知道从什么时候开始，每年的这个时刻，心里突然会浮起一种名为&lt;strong&gt;「硌得慌」&lt;/strong&gt;的情绪，不是疲惫于过年的种种繁琐，也不是担心各种亲戚长辈的问东问西。你一直想问，为什么别人对过年会那么期待，那么快乐。但其实，那个内心的幽灵真正想问的是：为什么&lt;strong&gt;你&lt;/strong&gt;不像别人那样翘首以待，不像别人那样乐在其中？你很快便不愿深究，害怕与群体文化对抗，害怕心里慢慢失去社会性。&lt;/p&gt;
&lt;p&gt;谁也不愿做那群快乐的绵羊中间那只皱眉的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkasnv7lj20go0as75h.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="蓝杏树" scheme="http://yoursite.com/tags/%E8%93%9D%E6%9D%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>星星萤火虫绘本</title>
    <link href="http://yoursite.com/2018/04/12/%E6%98%9F%E6%98%9F%E8%90%A4%E7%81%AB%E8%99%AB%E7%BB%98%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/04/12/星星萤火虫绘本/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2019-02-22T14:24:25.571Z</updated>
    
    <content type="html"><![CDATA[<p>小时候以为<br>星星是一只一只萤火虫化成的<br>萤火虫命中注定般渴望着月亮<br>彷徨在夜幕中渐明渐暗的光芒<br>是渺渺小小的简简单单的愿望<br>但在小孩心中<br>每一个星辰降落的夜晚<br>都显得那么的神圣</p>
<p>每每云层层叠叠地遮蔽月光<br>那是萤火最躁动的时候<br>它们忽然发现自己离月亮那样的遥远<br>它们慌张地寻找月光留下的蛛丝马迹<br>它们已经不能控制自己</p>
<a id="more"></a>
<p>夜晚如海平面般的宁静<br>小小的躯壳内却已波涛汹涌<br>思念在夜里肆意挥霍<br>拍打着礁石，发出哗哗的声音<br>仿佛连沉睡的大地都要唤醒<br>突然崖上的灯塔纷纷亮起<br>笔直的灯光连接了天空与海洋<br>像是温柔的声音，予躁动的心以虔诚的指引</p>
<p>点点微弱的光芒飞向天空<br>在迢遥的旅途中义无反顾<br>都说光是世上最快的速度<br>那么我能早点到你身边吗</p>
<p>当一道道汽笛声从远处传来<br>小孩望着连都市灯光都照不亮的天<br>数着数着，发现星星又多了一颗<br>看！<br>夕暮后的夜空，一闪一闪<br>这本久远的童话般的绘本<br>由萤火虫短暂的一生点缀而成</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小时候以为&lt;br&gt;星星是一只一只萤火虫化成的&lt;br&gt;萤火虫命中注定般渴望着月亮&lt;br&gt;彷徨在夜幕中渐明渐暗的光芒&lt;br&gt;是渺渺小小的简简单单的愿望&lt;br&gt;但在小孩心中&lt;br&gt;每一个星辰降落的夜晚&lt;br&gt;都显得那么的神圣&lt;/p&gt;
&lt;p&gt;每每云层层叠叠地遮蔽月光&lt;br&gt;那是萤火最躁动的时候&lt;br&gt;它们忽然发现自己离月亮那样的遥远&lt;br&gt;它们慌张地寻找月光留下的蛛丝马迹&lt;br&gt;它们已经不能控制自己&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="诗篇" scheme="http://yoursite.com/tags/%E8%AF%97%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>雨陌生地落在柏油路上</title>
    <link href="http://yoursite.com/2018/03/30/%E9%9B%A8%E9%99%8C%E7%94%9F%E5%9C%B0%E8%90%BD%E5%9C%A8%E6%9F%8F%E6%B2%B9%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/03/30/雨陌生地落在柏油路上/</id>
    <published>2018-03-29T16:00:00.000Z</published>
    <updated>2019-02-22T14:26:48.890Z</updated>
    
    <content type="html"><![CDATA[<p>你似乎可以很轻易地清楚事物变化的因果逻辑，很平静地接受周遭所发生的事情；但在没人的某个时刻，你会突然陷入一种莫名的恐慌，你措手不及，你不了解这种情绪从何而来，到哪里去。</p>
<p>你读很多书，当书本成为了你的知识，但你的心灵并不能接受和理解这些；当书本成为了你心灵的慰藉，但你觉得这些对你毫无裨益。你害怕读书了，你不想听到两个声音在吵架。</p>
<p>于是你采取了一种最为稳妥的行事方式。你把事情小心翼翼地分成若干个节点，对每个节点采取不同选择所造成的后果进行预测。你早已习惯采用风险最少的做法，似乎这让你的理性和感性都能接受。</p>
<p>你终于发现，你习以为常的行事方式根本不是你的本意，仅仅是你对最坏结果做出的妥协。你意识到，这是多么愚蠢与虚伪。你的大脑开始批判，你的内心开始反抗，但是他们批判谁呢，这是他们都接受的，如果非要找一个批判对象，那么又要从大脑内心之外再割裂出一块来。</p>
<p>每个人都是知行合一的。</p>
<p>你一直对此深以为然，如今这些理解都近乎坍塌。或许只有程序才是知行合一的；或许世上所有事物与他人都是知行合一的，除了人自己不是。</p>
<a id="more"></a>
<p>不能理解自己的人如何能理解他人。甚至乎当你充满焦虑时写下的东西在若干个小时之后会变得那么的陌生，仿佛是经他人之手写出来的。或许这是由于人面对自己的时候都很脆弱，脆弱到潜意识里不断抗拒承认这就是自己。</p>
<p>你已经开始有所释怀了，脆弱真是最合理的理由，仿佛以上都可以用此解释得酣畅淋漓。你也不必再苦心竭力地谋求答案了，毕竟这会伤到脆弱的自己。</p>
<p>很显然，你不能接受这个结果。你还未能决定要把这克服掉，还是偶尔允许其存在。犹豫不决的时候总是痛的，不过也比麻木要好上一些。且痛且行，不失为一种真切的实感。这种实感，就陪我走上一会吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你似乎可以很轻易地清楚事物变化的因果逻辑，很平静地接受周遭所发生的事情；但在没人的某个时刻，你会突然陷入一种莫名的恐慌，你措手不及，你不了解这种情绪从何而来，到哪里去。&lt;/p&gt;
&lt;p&gt;你读很多书，当书本成为了你的知识，但你的心灵并不能接受和理解这些；当书本成为了你心灵的慰藉，但你觉得这些对你毫无裨益。你害怕读书了，你不想听到两个声音在吵架。&lt;/p&gt;
&lt;p&gt;于是你采取了一种最为稳妥的行事方式。你把事情小心翼翼地分成若干个节点，对每个节点采取不同选择所造成的后果进行预测。你早已习惯采用风险最少的做法，似乎这让你的理性和感性都能接受。&lt;/p&gt;
&lt;p&gt;你终于发现，你习以为常的行事方式根本不是你的本意，仅仅是你对最坏结果做出的妥协。你意识到，这是多么愚蠢与虚伪。你的大脑开始批判，你的内心开始反抗，但是他们批判谁呢，这是他们都接受的，如果非要找一个批判对象，那么又要从大脑内心之外再割裂出一块来。&lt;/p&gt;
&lt;p&gt;每个人都是知行合一的。&lt;/p&gt;
&lt;p&gt;你一直对此深以为然，如今这些理解都近乎坍塌。或许只有程序才是知行合一的；或许世上所有事物与他人都是知行合一的，除了人自己不是。&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>(译)Kotlin 1.2 Released：Sharing Code between Platforms</title>
    <link href="http://yoursite.com/2018/01/15/(%E8%AF%91)Kotlin%201.2%20Released%20%20Sharing%20Code%20between%20Platforms/"/>
    <id>http://yoursite.com/2018/01/15/(译)Kotlin 1.2 Released  Sharing Code between Platforms/</id>
    <published>2018-01-14T16:00:00.000Z</published>
    <updated>2018-01-15T08:19:17.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a>&amp;<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/</a></p>
</blockquote>
<p>今天我们正式发布Kotlin1.2。这是一个意义重大的版本，也是将Kotlin推广到现代化应用的各部件开发的关键一步。</p>
<p>在Kotlin1.1版本，我们正式<strong>将JavaScript纳入支持</strong>，你可以将你的Kotlin代码编译成JS并在浏览器运行。而在Kotlin1.2，你的代码可以<strong>在JavaScript和JVM中复用</strong>。现在只需要编写一次业务逻辑，代码就能在后端、浏览器前端、Android移动app中复用。我们也正努力开发能让你复用更多代码的库，例如跨平台序列化的库。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/cake3-1.png" alt=""></p>
<p>Kotlin1.2将集成在本周发布的<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA 2017.3</a>。如果你正在使用Android Studio或旧版本的IntelliJ IDEA，你可以在Tools | Kotlin | Configure Kotlin Plugin Updates中安装新版本。</p>
<p>本次更新包含了许多外部贡献者的成果，我们也感谢你们反馈和报告的问题，尤其是提交了PR的贡献者。</p>
<a id="more"></a>
<h2 id="跨平台项目"><a href="#跨平台项目" class="headerlink" title="跨平台项目"></a>跨平台项目</h2><p>一个跨平台的项目允许你使用相同的代码库去构建多个层面的应用程序 —— 后端、前端和Android app。这样的项目不仅拥有包含跨平台代码的<strong>通用模块</strong>，还拥有包含特定平台(JVM或JS)代码与能调用依赖于平台的库的<strong>特定平台模块</strong>。 要从通用模块中调用特定平台代码，可以使用<strong>预定义</strong> - 所有特定平台模块都需要提供实际实现的声明。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/MPP.png" alt=""></p>
<p>此特性的更多的说明，请查看此<a href="http://kotlinlang.org/docs/reference/multiplatform.html" target="_blank" rel="external">文档</a></p>
<p>正如同前面所说的，我们正致力于开发更多的库，供你将业务逻辑迁移到通用模块：</p>
<ul>
<li><a href="http://kotlinlang.org/api/latest/kotlin.test/index.html" target="_blank" rel="external">kotlin.test</a>能直接在Kotlin1.2中使用，只需写一次测试便可在JVM和JS中运行</li>
<li><a href="https://github.com/kotlin/kotlinx.html" target="_blank" rel="external">kotlinx.html</a>支持-<strong>同构渲染</strong>——使同样的代码在前后端渲染HTML</li>
<li><a href="https://github.com/kotlin/kotlinx.serialization" target="_blank" rel="external">kotlinx.serialization</a>允许你使用JSON或者ProtoBuf在应用程序的不同层之间序列化Kotlin对象</li>
</ul>
<p>请注意跨平台项目现在只是一个实验性的特性；这意味着虽然可以正常使用，但我们可能会在后续版本中更改设计（到时我们会提供工具迁移代码的）。</p>
<h2 id="编译的性能优化"><a href="#编译的性能优化" class="headerlink" title="编译的性能优化"></a>编译的性能优化</h2><p>在1.2版本的开发过程中，我们费尽心思去提升编译的速度。相比于1.1版本，我们达到了接近25%的提升，并且我们看到了能进一步优化的潜力，这将在1.2.x的更新版本中发布。</p>
<p>下图展示了两个使用Kotlin构建的大型JetBrains项目在编译时的时间差异：</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/CompilationSpeed.png" alt=""></p>
<h2 id="其他在语言和标准库方面的改进"><a href="#其他在语言和标准库方面的改进" class="headerlink" title="其他在语言和标准库方面的改进"></a>其他在语言和标准库方面的改进</h2><p>我们还对语言和标准库进行了一些小改进：</p>
<ul>
<li>在注解（常量数组）传递多个参数时<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#array-literals-in-annotations" target="_blank" rel="external">一个更简洁的语法</a>；</li>
<li><code>lateinit</code>现在支持全局或局部变量了，同时检查<code>lateinit</code>变量是否已经初始化；</li>
<li><a href="http://kotlinlang.org/docs/reference/whatsnew12.html#smart-cast-improvements" target="_blank" rel="external">智能转换</a>和<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#information-from-explicit-casts-is-used-for-type-inference" target="_blank" rel="external">类型推断</a>在某些情况的改善；</li>
<li>标准库现在可以兼容Java9中引入的拆分包限制</li>
<li>标准库引入了新的<code>kotlin.math</code>包</li>
<li>标准库新增了用于处理队列和集合的函数，其中有<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#windowed-chunked-zipwithnext" target="_blank" rel="external">一组函数</a>可以将集合或队列分解为可重复固定尺寸的组</li>
</ul>
<p>更多信息及示例代码，请查看<a href="http://kotlinlang.org/docs/reference/whatsnew12.html" target="_blank" rel="external">What’s New in Kotlin 1.2</a>文档页面。</p>
<h2 id="走向世界的Kotlin"><a href="#走向世界的Kotlin" class="headerlink" title="走向世界的Kotlin"></a>走向世界的Kotlin</h2><p>随着今年3月份发布了Kotlin1.1，Kotlin在全世界范围内受到了巨大的关注，这在<a href="https://kotlinconf.com/" target="_blank" rel="external">KotlinConf</a>上达到最高峰，这次会议于11月2、3号在旧金山举行，总共有12000名与会者。本次会议我们作了全程记录，视频在<a href="https://kotlinconf.com/talks/" target="_blank" rel="external">这里</a>。</p>
<p>Kotlin现在已经受到了Android开发的官方支持，并且集成到Android Studio3.0中，同时Google也提供了<a href="https://developer.android.com/samples/index.html?language=kotlin" target="_blank" rel="external">示例</a>和<a href="https://android.github.io/kotlin-guides/" target="_blank" rel="external">设计规范</a>。据统计，已有<a href="https://android-developers.googleblog.com/2017/11/update-on-kotlin-for-android.html" target="_blank" rel="external">超过17％的Android Studio 3.0项目</a>在使用Kotlin了，其中包括来自热门初创公司和500强公司的许多应用程序。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinConfUsers.jpg" alt=""></p>
<p>在服务器端，<a href="https://spring.io/blog/2017/09/28/spring-framework-5-0-goes-ga" target="_blank" rel="external">Spring Framework 5.0</a>已经支持许多<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/languages.html#kotlin" target="_blank" rel="external">Kotlin的特性</a>了，<a href="http://vertx.io/" target="_blank" rel="external">Vert.x</a>也从3.4.0版本开始<a href="http://vertx.io/docs/vertx-core/kotlin/" target="_blank" rel="external">支持Kotlin</a>。此外，Gradle现在也开始支持Kotlin DSL，<a href="https://github.com/gradle/kotlin-dsl" target="_blank" rel="external">Gradle Kotlin DSL</a>项目正以可观的速度迈向1.0版本。</p>
<p>GitHub上开源项目的Kotlin代码行数已经超过了2500万。 在Stack Overflow上，<a href="https://stackoverflow.blog/2017/10/31/disliked-programming-languages/" target="_blank" rel="external">Kotlin是增长最快，也是最少被讨厌的语言之一</a>。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinAdoption.png" alt=""></p>
<p>Kotlin社区的发展速度也快得让人惊叹。现已有100多个用户群体遍布世界各地，除开我们无法追踪到的讨论，就我们所知而绘成的<a href="http://kotlinlang.org/community/talks.html" target="_blank" rel="external">讨论分布图</a>能让你了解到世界哪些地方正在使用Kotlin。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KUGmap.png" alt=""></p>
<p>同时也有越来越多的<a href="http://kotlinlang.org/docs/books.html" target="_blank" rel="external">书籍</a>(包括我们的”Kotlin in Action”已被译成<a href="https://manning.com/books/kotlin-in-action" target="_blank" rel="external">英语</a>、<a href="https://dmkpress.com/catalog/computer/programming/java/978-5-97060-497-7/" target="_blank" rel="external">俄语</a>、<a href="https://www.amazon.co.jp/Kotlin%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-Dmitry-Jemerov/dp/4839961743/ref=sr_1_2?ie=UTF8&amp;qid=1511539431&amp;sr=8-2&amp;keywords=kotlin" target="_blank" rel="external">日语</a>、<a href="https://www.amazon.com/Kotlin%E5%AE%9E%E6%88%98-Svetlana-Isakova-Dmitry-Jemerov/dp/B07568C58F/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1511539582&amp;sr=1-3" target="_blank" rel="external">中文</a>、<a href="https://novatec.com.br/livros/kotlin-em-acao/" target="_blank" rel="external">葡萄牙语</a>)、在线课堂、教程和<a href="http://kotlinlang.org/community/" target="_blank" rel="external">其他资料</a>供初学者学习。</p>
<h2 id="与开发团队交流：网络研讨会和Reddit-AMA"><a href="#与开发团队交流：网络研讨会和Reddit-AMA" class="headerlink" title="与开发团队交流：网络研讨会和Reddit AMA"></a>与开发团队交流：网络研讨会和Reddit AMA</h2><p>为了分享更多新版本信息，我们计划于12月7日晚上6点举办<a href="http://kotlinlang.org/community/" target="_blank" rel="external">Kotlin1.2跨平台项目的网络研讨会</a>。名额有限，请及时注册！</p>
<p>Kotlin团队也会在12月5日在<a href="https://www.reddit.com/r/Kotlin/" target="_blank" rel="external">Kotlin Reddit</a>上进行AMA(问答会)，讨论将于中午开始，与你度过接下来的24小时。</p>
<h2 id="如何升级"><a href="#如何升级" class="headerlink" title="如何升级"></a>如何升级</h2><p>与往常一样，你可以在<a href="http://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a>中<strong>尝试新版本</strong>。</p>
<ul>
<li><strong>在Maven，Gradle和npm</strong>：请更新编译版本及标准库版本号到<code>1.2.0</code>，详细请查看<a href="http://kotlinlang.org/docs/reference/using-gradle.html" target="_blank" rel="external">文档</a>。</li>
<li><strong>在Intellij IDEA</strong>：2017.3已集成了1.2版本，旧版本可以通过安装或更新Kotlin插件来获取最新版本。</li>
<li><strong>在Android Studio</strong>：请通过<em>Plugin Manager</em>安装或更新你的插件。</li>
<li><strong>在Eclipse</strong>：通过<a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse" target="_blank" rel="external">Marketplace</a>安装插件。</li>
<li><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2.0" target="_blank" rel="external">Github发布页</a>可下载最新命令行编译器。</li>
</ul>
<p><strong>关于兼容性</strong>：Kotlin1.2版本及其标准库是<a href="http://kotlinlang.org/docs/reference/compatibility.html" target="_blank" rel="external">向前兼容</a>的，在1.0或1.1版本下成功编译并运行的代码也能运行在1.2上。考虑到一些大型团队需要逐渐推进更新，我们提供了一些编译器开关以便禁用部分新特性。如果遇到问题，请参考<a href="http://kotlinlang.org/docs/reference/compatibility.html#binary-compatibility-warnings" target="_blank" rel="external">这里</a>。</p>
<p><em>请尽情享受Kotlin！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者：&lt;a href=&quot;https://pye52.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团子吃蛋挞&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://suima0v0.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黄志强&lt;/a&gt;&lt;br&gt;源地址：&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们正式发布Kotlin1.2。这是一个意义重大的版本，也是将Kotlin推广到现代化应用的各部件开发的关键一步。&lt;/p&gt;
&lt;p&gt;在Kotlin1.1版本，我们正式&lt;strong&gt;将JavaScript纳入支持&lt;/strong&gt;，你可以将你的Kotlin代码编译成JS并在浏览器运行。而在Kotlin1.2，你的代码可以&lt;strong&gt;在JavaScript和JVM中复用&lt;/strong&gt;。现在只需要编写一次业务逻辑，代码就能在后端、浏览器前端、Android移动app中复用。我们也正努力开发能让你复用更多代码的库，例如跨平台序列化的库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/cake3-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kotlin1.2将集成在本周发布的&lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IntelliJ IDEA 2017.3&lt;/a&gt;。如果你正在使用Android Studio或旧版本的IntelliJ IDEA，你可以在Tools | Kotlin | Configure Kotlin Plugin Updates中安装新版本。&lt;/p&gt;
&lt;p&gt;本次更新包含了许多外部贡献者的成果，我们也感谢你们反馈和报告的问题，尤其是提交了PR的贡献者。&lt;/p&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>(译)Kotlin 1.2 Beta is out</title>
    <link href="http://yoursite.com/2018/01/13/(%E8%AF%91)Kotlin%201.2%20Beta%20is%20out/"/>
    <id>http://yoursite.com/2018/01/13/(译)Kotlin 1.2 Beta is out/</id>
    <published>2018-01-12T16:00:00.000Z</published>
    <updated>2018-01-13T10:06:02.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a>&amp;<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/</a></p>
</blockquote>
<p>我们很高兴地发布Kotlin 1.2的Beta版本。借此发布，我们将揭示Kotlin 1.2的主要新特性——<strong>跨平台项目</strong>的实验性支持。此外，Kotlin native和标准库功能也<strong>开发完毕</strong> - 所有计划于Kotlin 1.2实现的新功能都已完备。现在正是你们<strong>反馈新改动</strong>的绝佳时期 - 因为我们仍然有时间对反馈加以考虑并调整1.2终版的设计。</p>
<p>在工具方面，Kotlin 1.2 Beta包含了与最近发布的<a href="https://github.com/enbandari/KotlinBlogTranslation/blob/master/translated/Kotlin%201.1.50%20is%20out.md" target="_blank" rel="external">1.1.50</a>更新相同的一系列特性。该测试版兼容从2016.3至2017.3的所有IntelliJ IDEA版本以及Android Studio 2.3与3.0。</p>
<p>从1.2-M2开始，所有的更新日志都可以在<a href="https://github.com/JetBrains/kotlin/blob/1.2-Beta/ChangeLog.md" target="_blank" rel="external">这里</a>找到。以下是重大改动：<img alt="12beta" class="alignnone size-full wp-image-5314" height="750" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/09/12beta.png" width="1500"></p>
<a id="more"></a>
<h1 id="跨平台项目"><a href="#跨平台项目" class="headerlink" title="跨平台项目"></a>跨平台项目</h1><p>跨平台项目是Kotlin 1.2的一个新的<strong>实验性</strong>功能，允许你在Kotlin支持的目标平台复用代码-JVM，JavaScript以及(未来会支持的)Native。在跨平台项目中，你提交的平台间的通用代码将放入通用模块，连同平台相关的部分一并放入依赖于平台的特定模块中。当您为一个特定的平台编译项目，公用部分和平台特定部分的代码都会生成出来。</p>
<p>跨平台项目所支持的一个关键特性是通过<strong>预期和实际的声明</strong>来表现通用代码与平台特定部分的依赖关系。预期声明定义API（类，接口，注释，顶层声明等）。实际声明则是该API在平台相依的实现，或是在外部库中引用现有实现的typealias：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Common code</span></div><div class="line">expect <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(world: <span class="type">String</span>)</span></span></div><div class="line"> </div><div class="line">expect <span class="class"><span class="keyword">class</span> <span class="title">URL</span></span>(spec: String) &#123;</div><div class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getHost</span><span class="params">()</span></span>: String</div><div class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPath</span><span class="params">()</span></span>: String</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// JVM code</span></div><div class="line">actual <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(world: <span class="type">String</span>)</span></span> &#123;</div><div class="line">  println(<span class="string">"Hello JVM <span class="variable">$world</span>"</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">actual typealias URL = java.net.URL</div></pre></td></tr></table></figure>
<p>若想得到更多跨平台项目的信息，请查看此<a href="http://kotlinlang.org/docs/reference/multiplatform.html" target="_blank" rel="external">文档</a>。</p>
<p>如果你在发布之前就已经尝试了该功能，也请注意及时更新您的项目：<code>header</code>和<code>impl</code>关键字已重命名为<code>expect</code>和<code>actual</code>。若想代码自动更新，请使用IntelliJ IDEA中的Analyze | Cleanup Code。</p>
<h1 id="语言和编译器"><a href="#语言和编译器" class="headerlink" title="语言和编译器"></a>语言和编译器</h1><h2 id="注释中的数组字面值"><a href="#注释中的数组字面值" class="headerlink" title="注释中的数组字面值"></a>注释中的数组字面值</h2><p>Kotlin 1.2有一个新的语言特性：对<strong>注释中文字常量数组</strong>的支持。现在，不需要类似<code>@CacheConfig(cacheNames = arrayOf(&quot;books&quot;, &quot;default&quot;))</code>这样的写法了，你只需要这样简单地表示：</p>
<p><code>@CacheConfig(cacheNames = [&quot;books&quot;, &quot;default&quot;])</code></p>
<p>其实早在Kotlin 1.2之前的里程碑版本中你已经可以这样做了。但在1.2 Beta中，我们更加统一了语法并允许使用常量数组和<code>可变</code>参数：</p>
<p><code>@RequestMapping(value = [&quot;value1&quot;, &quot;value2&quot;], path = [&quot;path1&quot;, &quot;path2&quot;])</code></p>
<p>为了实现这种改动，我们决定对常规方法调用和注释中，使用命名参数和可变参数的语法做一些调整。你可能会感到惊讶，因为在Kotlin 1.1中，当使用命名参数语法调用<code>可变参数</code>方法时，可以传递单个参数作为一个立即值：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(<span class="keyword">vararg</span> strs: <span class="type">String</span>)</span></span> &#123; ... &#125;</div><div class="line"> </div><div class="line">foo(strs = <span class="string">"abc"</span>)</div></pre></td></tr></table></figure>
<p>这样将<code>&quot;abc&quot;</code>赋值于<code>strs</code>是不太恰当的，这导致我们在将整个数组作为命名参数传递时得使用展开运算符：</p>
<p><code>foo(strs = *arr)</code></p>
<p>我们很想可以写成<code>foo(strs = arr)</code>，但考虑到兼容性，它需要一个逐步迁移的过程，所以在1.2版本里面，我们弃用了<code>foo(strs = &quot;abc&quot;)</code>这样的写法。取而代之的是（这种用法应该很少见到），你可以使用展开和<code>arrayOf</code>方法：</p>
<p><code>foo(x = *arrayOf(&quot;abc&quot;))</code></p>
<p>我们计划实现一个<a href="https://youtrack.jetbrains.com/issue/KT-20462" target="_blank" rel="external">编译器优化方案</a>来消除在这样的调用下对于数组的分配与复制。</p>
<p>由于注释是一个更受限制的上下文，所以我们可以跳过一步迁移，那样你就可以简单地把值放入一个字面值数组，而不需要扩展运算符：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>(<span class="keyword">vararg</span> value: String)</div><div class="line"> </div><div class="line"><span class="meta">@Foo(value = <span class="meta-string">"a"</span>)</span> <span class="comment">// deprecated</span></div><div class="line"><span class="meta">@Foo(value = [<span class="meta-string">"a"</span>])</span> <span class="comment">// correct</span></div></pre></td></tr></table></figure>
<p>在<a href="https://youtrack.jetbrains.com/issue/KT-20171" target="_blank" rel="external">You Track issue</a>可以看到更多相关信息。</p>
<h2 id="lateinit改进"><a href="#lateinit改进" class="headerlink" title="lateinit改进"></a>lateinit改进</h2><p>我们添加了一个新的反射API，这允许您检查一个<code>lateinit</code>变量是否已被初始化：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> file: File</div><div class="line"> </div><div class="line"><span class="comment">// ...</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> (::file.isInitialized) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是<a href="https://github.com/Kotlin/KEEP/pull/73/files" target="_blank" rel="external">该KEEP提议</a>的一部分实现，剩下的部分（<code>析构</code>的方法）则暂时推迟到1.3。</p>
<p>此外，<code>lateinit</code>修饰符现在可以用在<a href="https://youtrack.jetbrains.com/issue/KT-15461" target="_blank" rel="external">全局属性</a>和<a href="https://youtrack.jetbrains.com/issue/KT-14138" target="_blank" rel="external">局部变量</a>上了。举个例子，当你初始化一个对象图，在图中对象的属性之间有一个循环依赖关系的时候（比如，当lambda作为一个构造函数的参数让一个对象引用另一个对象的时候，必须在传递之后才定义），局部变量便可以使用了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">lateinit</span> <span class="keyword">var</span> x: Component</div><div class="line"> </div><div class="line">  <span class="comment">// inject takes a lambda which must return the Component though</span></div><div class="line">  <span class="keyword">val</span> injector = inject(</div><div class="line">    ...,</div><div class="line">    componentProvider = &#123; x &#125;,</div><div class="line">    ...</div><div class="line">  )</div><div class="line"> </div><div class="line">  <span class="comment">// Initialization is only possible via injector, once it has been run</span></div><div class="line">  x = injector.createComponent()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多详细信息，请查看<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/local-and-top-level-lateinit-vars.md" target="_blank" rel="external">KEEP</a>。</p>
<h2 id="绑定方法引用的改进"><a href="#绑定方法引用的改进" class="headerlink" title="绑定方法引用的改进"></a>绑定方法引用的改进</h2><p>现在，你可以把类似<code>this::foo</code>这样的引用方法中的<code>this</code> 省略掉，直接写成<code>::foo</code>。在之前只有全局引用的时候才能省略。更多信息，请查看<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-15667" target="_blank" rel="external">YouTrack issue</a>。</p>
<h2 id="类型推断的改进"><a href="#类型推断的改进" class="headerlink" title="类型推断的改进"></a>类型推断的改进</h2><p>Kotlin编译器现在可以使用类型推断中的类型转换信息。当调用了一个返回<code>T</code>且转换为特定类型<code>Foo</code>的泛型方法，编译器现在可以知道这个泛型绑定的是<code>Foo</code>类型。这对于Android开发人员十分重要，因为编译器在Android API26中可以正确分析<code>findViewById</code>了：</p>
<p><code>val button = findViewById（R.id.button）as Button</code></p>
<p>由于该方法已被改为<code>&lt;T extends View&gt; T findViewById(int id)</code>，因此Kotlin 1.1已不支持在这种调用中推断<code>T</code>类型参数。更多信息，请查看<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-13644" target="_blank" rel="external">YouTrack issue</a>。</p>
<h2 id="警告视为错误"><a href="#警告视为错误" class="headerlink" title="警告视为错误"></a>警告视为错误</h2><p>现在编译器提供了一个将所有警告视为错误的选项。在命令行或下面的Gradle代码片段中使用<code>-Werror</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compileKotlin &#123;</div><div class="line">  kotlinOptions.warningsAsErrors = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Smart-cast的改进"><a href="#Smart-cast的改进" class="headerlink" title="Smart cast的改进"></a>Smart cast的改进</h2><p>Smart cast现在能用在<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-4565" target="_blank" rel="external">subjects of safe casts</a>了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(x: <span class="type">Foo</span>?)</span></span> &#123;</div><div class="line">  <span class="keyword">val</span> b = (x <span class="keyword">as</span>? SubClass)?.subclassMethod1()</div><div class="line">  <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</div><div class="line">    x.subclassMethod2() <span class="comment">// x is smart cast to SubClass</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，以前只允许在lambda之前修改的的<code>var</code>变量<a href="https://youtrack.jetbrains.com/issue/KT-14486" target="_blank" rel="external">现在能</a>在其中执行Smart cast了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x: String? = <span class="literal">null</span></div><div class="line"><span class="keyword">if</span> (flag) x = <span class="string">"Yahoo!"</span></div><div class="line"> </div><div class="line">run &#123;</div><div class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span>) &#123;</div><div class="line">    println(x.length) <span class="comment">// x is smart cast to String</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="枚举中的嵌套类"><a href="#枚举中的嵌套类" class="headerlink" title="枚举中的嵌套类"></a>枚举中的嵌套类</h2><p>枚举内的嵌套类现在已经被<a href="https://youtrack.jetbrains.com/issue/KT-16310" target="_blank" rel="external">弃用</a>；解决方案为将class标记为inner。</p>
<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="分包的兼容性"><a href="#分包的兼容性" class="headerlink" title="分包的兼容性"></a>分包的兼容性</h2><p>Kotlin标准库现在完全兼容Java 9的模块系统，Java 9禁止分包（多个jar文件在同一个包中声明类）。为了支持分包，我们创建了新的<code>kotlin-stdlib-jdk7</code>和<code>kotlin-stdlib-jdk8</code>，取代了旧的<code>kotlin-stdlib-jre7</code>和<code>kotlin-stdlib-jre8</code>。其中的声明在kotlin的同名包下是可见的，但是由于我们对编译器添加了黑魔法，这在Java的不同名包下也是可见的。因此，这种切换不需要对源代码进行任何更改。</p>
<p>为确保与新模块系统的兼容性，我们做出的另一个改动是从<code>kotlin-reflect</code>库中移除<code>kotlin.reflect</code>包中已经弃用的声明。这些声明需要在<code>kotlin.reflect.full</code>包中使用，这在Kotlin 1.1中就已经支持了。</p>
<h2 id="kotlin-math"><a href="#kotlin-math" class="headerlink" title="kotlin.math"></a>kotlin.math</h2><p><code>kotlin.math</code>是Kotlin 1.2标准库中的一个新包，允许您在跨平台代码中执行数学运算。在1.2-Beta中，我们对它进行了一些改进：</p>
<ul>
<li>现在支持反双曲函数（asinh，acosh，atanh）</li>
<li>在<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">1.2-M2</a>中添加的浮点数二进制表示（toBits，nextUp等）相关的函数现在可用于JavaScript</li>
<li>对JavaScript中polyfills精确度的改进</li>
</ul>
<h1 id="发布前的注意事项"><a href="#发布前的注意事项" class="headerlink" title="发布前的注意事项"></a>发布前的注意事项</h1><p><em>与其他里程碑版本一样，我们对新语言和库的相关功能<strong>不保证向后兼容性</strong>。在1.2的里程碑版本中引入的任何内容在1.2终版之前<strong>可能会发生变化</strong>。一旦RC版确定，在此之前版本的编译文件将被编译器清理，你需要重新编译1.2-Mx或1.2-Beta所编译过的文件。</em></p>
<p><em>但是，这不会影响由1.1.x和之前release版本编译的代码。</em></p>
<h1 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h1><p><strong>通过Maven / Gradle</strong>：在构建脚本和项目仓库中添加<code>http://dl.bintray.com/kotlin/kotlin-eap-1.2</code>；使用<code>1.2.0-beta-31</code>作为编译器插件和标准库的版本号。</p>
<p><strong>通过IntelliJ IDEA</strong>：<em>工具→Kotlin→配置Kotlin插件更新</em>，在更新下拉列表中选择“Early Access Preview 1.2”，然后点击<em>检查更新</em>。命令行编译器可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2-beta" target="_blank" rel="external">GitHub release page</a>下载。</p>
<p><strong>通过<a href="https://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a></strong>：使用右下角的下拉列表将编译器版本更改为1.2（即将实现）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者：&lt;a href=&quot;https://pye52.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团子吃蛋挞&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://suima0v0.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黄志强&lt;/a&gt;&lt;br&gt;源地址：&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们很高兴地发布Kotlin 1.2的Beta版本。借此发布，我们将揭示Kotlin 1.2的主要新特性——&lt;strong&gt;跨平台项目&lt;/strong&gt;的实验性支持。此外，Kotlin native和标准库功能也&lt;strong&gt;开发完毕&lt;/strong&gt; - 所有计划于Kotlin 1.2实现的新功能都已完备。现在正是你们&lt;strong&gt;反馈新改动&lt;/strong&gt;的绝佳时期 - 因为我们仍然有时间对反馈加以考虑并调整1.2终版的设计。&lt;/p&gt;
&lt;p&gt;在工具方面，Kotlin 1.2 Beta包含了与最近发布的&lt;a href=&quot;https://github.com/enbandari/KotlinBlogTranslation/blob/master/translated/Kotlin%201.1.50%20is%20out.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1.1.50&lt;/a&gt;更新相同的一系列特性。该测试版兼容从2016.3至2017.3的所有IntelliJ IDEA版本以及Android Studio 2.3与3.0。&lt;/p&gt;
&lt;p&gt;从1.2-M2开始，所有的更新日志都可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/1.2-Beta/ChangeLog.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到。以下是重大改动：&lt;img alt=&quot;12beta&quot; class=&quot;alignnone size-full wp-image-5314&quot; height=&quot;750&quot; src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/09/12beta.png&quot; width=&quot;1500&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>小南瓜鸡蛋杯宣传视频</title>
    <link href="http://yoursite.com/2018/01/13/%E5%B0%8F%E5%8D%97%E7%93%9C%E9%B8%A1%E8%9B%8B%E6%9D%AF%E5%AE%A3%E4%BC%A0%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2018/01/13/小南瓜鸡蛋杯宣传视频/</id>
    <published>2018-01-12T16:00:00.000Z</published>
    <updated>2019-10-19T08:07:16.720Z</updated>
    
    <content type="html"><![CDATA[<video height="480" width="854" controls><source src="https://cloud.video.taobao.com/play/u/4021205845/p/2/e/6/t/1/50195620377.mp4" type="video/mp4"></video>

<p>STAFF：<br>拍摄 甘希明&amp;美逗摄影<br>脚本 黄志强<br>剪辑 黄志强<br>后期 黄志强</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;video height=&quot;480&quot; width=&quot;854&quot; controls&gt;&lt;source src=&quot;https://cloud.video.taobao.com/play/u/4021205845/p/2/e/6/t/1/50195620377.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;STAFF：&lt;br&gt;拍摄 甘希明&amp;amp;美逗摄影&lt;br&gt;脚本 黄志强&lt;br&gt;剪辑 黄志强&lt;br&gt;后期 黄志强&lt;/p&gt;
    
    </summary>
    
      <category term="视频" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="视频" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>(译)Kotlin 1.2 M2 is out</title>
    <link href="http://yoursite.com/2017/09/10/(%E8%AF%91)Kotlin%201.2%20M2%20is%20out/"/>
    <id>http://yoursite.com/2017/09/10/(译)Kotlin 1.2 M2 is out/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2018-01-13T09:56:12.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a>&amp;<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/</a></p>
</blockquote>
<p>我们很高兴地公布Kotlin 1.2的第二个里程碑版本。该版本的重点在于Kotlin编译器和工具的稳定性与bug修复，以及Kotlin标准库的改进。此外还包含了很多即将发布的Kotlin 1.1.4所具备的工具特性。</p>
<p>如果能有您对新特性或者运行中所遇到的任何问题的反馈，我们将非常感谢。</p>
<p>从1.2 M1开始，完整的更新日志可以在<a href="https://github.com/JetBrains/kotlin/blob/1.2-M2/ChangeLog.md" target="_blank" rel="external">这里</a>查看，重要的变更在下面列出：</p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><h3 id="重大更改：Java默认方法调用"><a href="#重大更改：Java默认方法调用" class="headerlink" title="重大更改：Java默认方法调用"></a>重大更改：Java默认方法调用</h3><p>到目前为止，Kotlin的接口成员在jvm 1.6重写Java默认方法的时候，如果通过super调用父类方法，将会得到一个警告<code>子类对Java默认方法的调用在JVM target 1.6已被弃用。请使用-jvm-target 1.8重新编译</code>。在1.2-M2版本中，我们将警告变更为错误，因此此类代码将需要使用<code>-jvm-target 1.8</code>编译。</p>
<a id="more"></a>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="修正windowed-pairwise操作"><a href="#修正windowed-pairwise操作" class="headerlink" title="修正windowed/pairwise操作"></a>修正windowed/pairwise操作</h3><p>我们听取了大家<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/window-sliding.md" target="_blank" rel="external">KEEP-11</a>中关于chunked/windowed/pairwise函数的反馈，并且在1.2-M1里程碑版中发布了预览功能，在这基础上，我们还进行了如下改动：</p>
<ul>
<li><p><code>windowed</code>函数的自增变量现在默认为1。<br>同时还增加了一个额外的可选参数<code>partialWindows</code>，用于控制不完整的窗口的结束处理流程。默认值为false，表示不完整的窗口不会保留。</p>
</li>
<li><p><code>pairwise</code>函数名让人摸不着头脑，不知道它是如何配对元素的。所以我们新命名为<code>zipWithNext</code>，这更清楚地表明这函数会把集合中每个元素和下一个元素都压缩一次。</p>
</li>
</ul>
<h3 id="标准库中的通用数学运算"><a href="#标准库中的通用数学运算" class="headerlink" title="标准库中的通用数学运算"></a>标准库中的通用数学运算</h3><p>长期以来人们一直希望标准库<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-4900" target="_blank" rel="external">KT-4900</a>能够支持数学运算。但目前我们只能借助JVM平台上的<code>java.lang.Math</code>数学函数与常量，和JS平台上会把原生JS数学函数暴露给Kotlin的<code>kotlin.js.Math</code>。</p>
<p>但现在我们在<code>kotlin.math</code>包中引入了下述几组API：</p>
<ul>
<li>常数：<code>PI</code>和<code>E</code>；</li>
<li>三角函数：<code>cos</code>，<code>sin</code>，<code>tan</code>和反三角函数<code>acos</code>，<code>asin</code>，<code>atan</code>，<code>atan2</code>；</li>
<li>双曲函数：<code>cosh</code>，<code>sinh</code>，<code>tanh</code>；</li>
<li>幂函数：<code>pow</code>（扩展函数），<code>sqrt</code>，<code>hypot</code>，<code>exp</code>，<code>expm1</code>；</li>
<li>对数函数：<code>log</code>，<code>log2</code>，<code>log10</code>，<code>ln</code>，<code>ln1p</code>；</li>
<li>取整函数：<ul>
<li><code>ceil</code>，<code>floor</code>，<code>truncate</code>，<code>round</code>（奇进偶取）函数；</li>
<li><code>roundToInt</code>，<code>roundToLong</code>（半整数）扩展函数；</li>
</ul>
</li>
<li>符号和绝对值：<ul>
<li><code>abs</code> 和 <code>sign</code> 函数；</li>
<li><code>absoluteValue</code>和<code>sign</code>扩展属性；</li>
<li><code>withSign</code>扩展函数；</li>
</ul>
</li>
<li>比较两个值的<code>max</code>和<code>min</code>函数；</li>
<li>二进制表示法：<ul>
<li><code>ulp</code>扩展属性；</li>
<li><code>nextUp</code>，<code>nextDown</code>，<code>nextTowards</code>扩展函数；</li>
<li><code>toBits</code>，<code>toRawBits</code>，<code>Double.fromBits</code>（都在<code>kotlin</code>包中）。</li>
</ul>
</li>
</ul>
<p><code>Float</code>参数也可用相同的函数集（常数除外）。</p>
<p>上述函数大部分（二进制表示法除外）在JS也可以使用，因此两个平台可以通用一套计算代码。</p>
<h2 id="预发行说明"><a href="#预发行说明" class="headerlink" title="预发行说明"></a>预发行说明</h2><blockquote>
<p>与其他里程碑版本一样，对于新的语言和标准库特性，<strong>我们不会提供向后兼容的保证</strong>。1.2最终版之前，新引入的内容都<strong>尙处于更改之中</strong>。当我们最终RC时，预发行版本的所有二进制文件将被编译器认为不合法：您需要重新编译之前1.2-Mx编译的所有内容。    </p>
<p>但是，使用1.1.x或更早的版本编译的代码则不需要重新编译也可以完美运行。</p>
</blockquote>
<h2 id="体验新版"><a href="#体验新版" class="headerlink" title="体验新版"></a>体验新版</h2><p><strong>在Maven / Gradle</strong>：添加<code>http://dl.bintray.com/kotlin/kotlin-eap-1.2</code>作为构建脚本和项目的库；然后把编译插件和标准库的版本号修改为<code>1.2-M2</code>。</p>
<p><strong>在IntelliJ IDEA</strong>：打开<em>Tools → Kotlin → Configure Kotlin Plugin Updates</em>，接着在<em>Update channel</em>下拉列表中选择”Early Access Preview 1.2”，然后点击<em>Check for updates</em>。</p>
<p>命令行编译器可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2-M2" target="_blank" rel="external">Github发布页面</a>下载。</p>
<p><strong>在<a href="https://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a></strong>：在右下角的下拉列表将编译器版本更改为1.2-M2（即将开放）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者：&lt;a href=&quot;https://pye52.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团子吃蛋挞&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://suima0v0.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黄志强&lt;/a&gt;&lt;br&gt;源地址：&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们很高兴地公布Kotlin 1.2的第二个里程碑版本。该版本的重点在于Kotlin编译器和工具的稳定性与bug修复，以及Kotlin标准库的改进。此外还包含了很多即将发布的Kotlin 1.1.4所具备的工具特性。&lt;/p&gt;
&lt;p&gt;如果能有您对新特性或者运行中所遇到的任何问题的反馈，我们将非常感谢。&lt;/p&gt;
&lt;p&gt;从1.2 M1开始，完整的更新日志可以在&lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/1.2-M2/ChangeLog.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;查看，重要的变更在下面列出：&lt;/p&gt;
&lt;h2 id=&quot;编译器&quot;&gt;&lt;a href=&quot;#编译器&quot; class=&quot;headerlink&quot; title=&quot;编译器&quot;&gt;&lt;/a&gt;编译器&lt;/h2&gt;&lt;h3 id=&quot;重大更改：Java默认方法调用&quot;&gt;&lt;a href=&quot;#重大更改：Java默认方法调用&quot; class=&quot;headerlink&quot; title=&quot;重大更改：Java默认方法调用&quot;&gt;&lt;/a&gt;重大更改：Java默认方法调用&lt;/h3&gt;&lt;p&gt;到目前为止，Kotlin的接口成员在jvm 1.6重写Java默认方法的时候，如果通过super调用父类方法，将会得到一个警告&lt;code&gt;子类对Java默认方法的调用在JVM target 1.6已被弃用。请使用-jvm-target 1.8重新编译&lt;/code&gt;。在1.2-M2版本中，我们将警告变更为错误，因此此类代码将需要使用&lt;code&gt;-jvm-target 1.8&lt;/code&gt;编译。&lt;/p&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>(译)KotlinConf – Speaker List Announced</title>
    <link href="http://yoursite.com/2017/07/24/(%E8%AF%91)KotlinConf%20-%20Speaker%20List%20Announced/"/>
    <id>http://yoursite.com/2017/07/24/(译)KotlinConf - Speaker List Announced/</id>
    <published>2017-07-23T16:00:00.000Z</published>
    <updated>2018-01-13T09:57:37.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a>&amp;<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/</a></p>
</blockquote>
<p>仍未到11月吗？</p>
<p>距离KotlinConf 2017只剩100多天了，我们在此非常激动地宣布我们邀请了<a href="https://kotlinconf.com/speakers/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">48位十分出色的讲师</a>发表演说！能有这样优秀的嘉宾与公司团队代表Kotlin社区，我感到非常兴奋。</p>

<p><a href="https://kotlinconf.com/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external"><img alt="KotlinConf" class="aligncenter size-full wp-image-5123" height="354" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/07/kc.png" width="940"></a></p>


<p><span id="more-5121"></span></p>

<a id="more"></a>
<p>一般抢先票在首轮抢先注册活动之后也已经售罄了，普通门票尚在发售中，售完即止。如果你想参加KotlinConf，也请<a href="https://kotlinconf.com/registration/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">马上注册</a>吧，否则你将错失机会。</p>
<p>温馨提示，KotlinConf将于11月2-3日在美丽的加利福尼亚州旧金山27码头举行。届时JetBrains团队和充满激情的社区讲师将分享他们关于Kotlin的知识，经验和理念。</p>
<p>为期两天的学习，交流会与更多的乐趣在等待着你。<a href="https://kotlinconf.com/registration/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">立刻注册吧</a>！</p>
<p>我们期待着在今秋的旧金山与你相见！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者：&lt;a href=&quot;https://pye52.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团子吃蛋挞&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://suima0v0.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黄志强&lt;/a&gt;&lt;br&gt;源地址：&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仍未到11月吗？&lt;/p&gt;
&lt;p&gt;距离KotlinConf 2017只剩100多天了，我们在此非常激动地宣布我们邀请了&lt;a href=&quot;https://kotlinconf.com/speakers/?utm_source=kotlinblog&amp;amp;utm_medium=blog&amp;amp;utm_campaign=speakerannouncement&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;48位十分出色的讲师&lt;/a&gt;发表演说！能有这样优秀的嘉宾与公司团队代表Kotlin社区，我感到非常兴奋。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinconf.com/?utm_source=kotlinblog&amp;amp;utm_medium=blog&amp;amp;utm_campaign=speakerannouncement&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img alt=&quot;KotlinConf&quot; class=&quot;aligncenter size-full wp-image-5123&quot; height=&quot;354&quot; src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/07/kc.png&quot; width=&quot;940&quot;&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;span id=&quot;more-5121&quot;&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>(译)Kotlin Future Features Survey Results</title>
    <link href="http://yoursite.com/2017/07/23/(%E8%AF%91)Kotlin%20Future%20Features%20Survey%20Results/"/>
    <id>http://yoursite.com/2017/07/23/(译)Kotlin Future Features Survey Results/</id>
    <published>2017-07-22T16:00:00.000Z</published>
    <updated>2018-01-13T09:57:25.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a>&amp;<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/</a></p>
</blockquote>
<p>最近令人激动的事情层出不穷，我们不得不怀着抱歉的心情推迟公布Future Features Survey的结果。但迟到总比不到要好，本博客总结了我们在调查中获知的内容。</p>
<p>总的来说，<a href="https://blog.jetbrains.com/kotlin/2017/04/kotlin-1-1-event-report/" target="_blank" rel="external">Future Features Survey</a>从四月份开始，一共收到约850份答复。在此我们要感谢所有参与者！</p>
<h1 id="调查结果"><a href="#调查结果" class="headerlink" title="调查结果"></a>调查结果</h1><p>原始的统计数据（匿名）可在<a href="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/edit" target="_blank" rel="external">这里</a>获得。</p>
<p>我们的议题有二：</p>
<ul>
<li><p>提名三个最受你期待的特性</p>
</li>
<li><p>提出一项你认为不需要的特性（可选）</p>
<a id="more"></a>
</li>
</ul>
<p>你可以在<a href="https://drive.google.com/file/d/0BwAovUlww0CmVmNQTXd4TTdKYUU/view" target="_blank" rel="external">这里</a>查看提名features的名单。</p>
<p>我们总共收到852份答复（某些是白卷），其中大多数人都用完了3个实用特性的提名名额，而约有300多人放弃了对不受欢迎特性的提名。</p>
<p>这是汇总的结果（按受欢迎程度排名）：</p>

<p><iframe frameborder="0" height="637" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/pubchart?oid=2077021838&amp;format=interactive" width="790"></iframe></p>


<p><span id="more-5025"></span></p>

<p>由上图可知，最受欢迎特性的依次为：“Collection literals”, “SAM conversions for Kotlin interfaces”与“Truly immutable data”</p>
<p>而“Private members accessible from tests”似乎最具争议，108票赞同与120票反对。这可以理解，毕竟可测试性设计是被广泛认可的惯例。</p>
<p>但我对“Overloadable operators | and &amp;”的提名结果感到些许困惑，有46票赞成与50票反对，而我看不出这个特性所带来的任何坏处，请在文章评论区分享你这样选择的原因。</p>
<p>这是最不受欢迎特性的排名：</p>

<p><iframe frameborder="0" height="483.5" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/pubchart?oid=346107453&amp;format=interactive" width="933"></iframe></p>

<p>需要说明的是，“Optional commas”和“Optional trailing commas”本应是两个选项，我们错误地把他们放在了同一个feature中，所以引起了难以解读的结果。</p>
<p>另外我们还忘了在调查中添加“Ternary conditional operator”，在我意识到的时候已经太晚了，很抱歉各位。我们已经明白这个功能会有很大需求，会持续进行研究的。</p>
<p>但最奇怪的是，这次调查的结果与在Kotlin 1.1发布会中进行的调查截然不同：</p>

<p><iframe frameborder="0" height="580" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1gR1C69Rcmv2szbQJ-mXrhW7KtU4tPSya93Xq9sfE8Y0/pubchart?oid=2043595044&amp;format=interactive" width="1034"></iframe></p>

<p>我怀疑是人们看了上次投票后产生了某些偏见，但这很难确定，也可能是另外的因素，例如线下与线上的参与者本身就具有很大的差异性。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>已明确方向的三个特性是：</p>
<ul>
<li>Collection literals</li>
<li>SAM conversions for Kotlin interfaces</li>
<li>Truly immutable data</li>
</ul>
<p>相比之下其余的features只收到了较少的投票。Truly immutable data饱受期待，但真的很难实现，这里我们没法给予承诺。而另外两项在不久的将来都可以实现，multi-catch看起来也不错。总而言之，我们将在工作计划中重视这次调查的结果。</p>
<p>免责声明：如上所述，我们并没有承诺在特定的时间内完成任何这些功能。我们很关心用户需要什么，但不能预先承诺任何东西。因为在知道这些功能是否确切（并且优雅地）适合这种语言之前，我们都需要进行慎重的设计工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者：&lt;a href=&quot;https://pye52.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团子吃蛋挞&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://suima0v0.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黄志强&lt;/a&gt;&lt;br&gt;源地址：&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近令人激动的事情层出不穷，我们不得不怀着抱歉的心情推迟公布Future Features Survey的结果。但迟到总比不到要好，本博客总结了我们在调查中获知的内容。&lt;/p&gt;
&lt;p&gt;总的来说，&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/04/kotlin-1-1-event-report/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Future Features Survey&lt;/a&gt;从四月份开始，一共收到约850份答复。在此我们要感谢所有参与者！&lt;/p&gt;
&lt;h1 id=&quot;调查结果&quot;&gt;&lt;a href=&quot;#调查结果&quot; class=&quot;headerlink&quot; title=&quot;调查结果&quot;&gt;&lt;/a&gt;调查结果&lt;/h1&gt;&lt;p&gt;原始的统计数据（匿名）可在&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;获得。&lt;/p&gt;
&lt;p&gt;我们的议题有二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提名三个最受你期待的特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提出一项你认为不需要的特性（可选）&lt;/p&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>夏の音：ギタとひぐらしと少女のうた</title>
    <link href="http://yoursite.com/2017/07/16/%E5%A4%8F%E3%81%AE%E9%9F%B3%EF%BC%9A%E3%82%AE%E3%82%BF%E3%81%A8%E3%81%B2%E3%81%90%E3%82%89%E3%81%97%E3%81%A8%E5%B0%91%E5%A5%B3%E3%81%AE%E3%81%86%E3%81%9F/"/>
    <id>http://yoursite.com/2017/07/16/夏の音：ギタとひぐらしと少女のうた/</id>
    <published>2017-07-15T16:00:00.000Z</published>
    <updated>2017-11-29T10:40:05.725Z</updated>
    
    <content type="html"><![CDATA[<p>朝、ひぐらしの鳴き声と共に起きる</p>
<p>夜、ひぐらしの鳴き声と共に眠る</p>
<p>夏が、いつの間に、来たろ。部屋外の木や、草や、いつの間に、そんなに青いになったろ。熱が、山のように重い、ぼくを迫ている。けど、空の色、木色、どこにもある蜩の音、まさに、世界が子供のような、「私は生きている！」と僕を叫びている。生き生きとするな、世界は。</p>
<a id="more"></a>
<p>夏と言うと、もちろん今は少女音とギタの季節だ！JPOPや、ロックや、幻想を満たす色々な唄が何の拘束もない、自然で自由な生活を僕の頭に届ける。僕のプログラム中のコードも、綺麗になった。「コードは芸術だ。」突然、そう思いをする。</p>
<blockquote>
<p>「君が好きだから</p>
<p>君の大好きな夏を好きになった</p>
<p>焼けるような日差しに腰を下ろして</p>
<p>溶けて流れた虹に笑った」</p>
</blockquote>
<p>こんの生活が欲しいな、海風に乗って夏の恋の甘さを。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;朝、ひぐらしの鳴き声と共に起きる&lt;/p&gt;
&lt;p&gt;夜、ひぐらしの鳴き声と共に眠る&lt;/p&gt;
&lt;p&gt;夏が、いつの間に、来たろ。部屋外の木や、草や、いつの間に、そんなに青いになったろ。熱が、山のように重い、ぼくを迫ている。けど、空の色、木色、どこにもある蜩の音、まさに、世界が子供のような、「私は生きている！」と僕を叫びている。生き生きとするな、世界は。&lt;/p&gt;
    
    </summary>
    
      <category term="日本語" scheme="http://yoursite.com/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"/>
    
    
      <category term="日本语" scheme="http://yoursite.com/tags/%E6%97%A5%E6%9C%AC%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>狂赋</title>
    <link href="http://yoursite.com/2017/07/15/%E7%8B%82%E8%B5%8B/"/>
    <id>http://yoursite.com/2017/07/15/狂赋/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-12-29T14:26:22.034Z</updated>
    
    <content type="html"><![CDATA[<p>　　狂者，气也。</p>
<p>　　腹满书而生气，气饱腹而自溢。溢者，狂也。大凡狂者，皆负才情。小才者狂，芥而锐目，倾国色之牡丹，决桎梏之洪流，落逸禽之飞矢，幻灯红之迷昙；大才者狂，瀚而磅礴，抟扶摇之棕榈，纳百川之沉渊，覆天地之浮云，忘光阴之大椿。小狂狂而毕露，鹗之眸，豹之尾；大狂狂而尽敛，鹏之羽，龟之甲。是故小才者，“狂”之左，兽之利器；大才者，“狂”之右，王之霸气。</p>
<p>　　夫人之气宇，修于内而发于外，生于书而广于己。汲百家之精髓，融一身之秀气，生于混沌，化于雏形，表于世间。忽察人之修行，莫如己高；世之涵养，莫如己深，便滋狂傲之气，视弱者为蝼蚁，以自身为独秀，著狂论以傲世，搁礼仪于不顾，其小狂已成形。既而似韦编三绝，汗牛充栋，又品察人间情愫，世态百味，便始参天道，自成一体，饱藏宇宙天机，吐纳山川灵气，洞察时间轮回，包容天地万物，融有形于无形，化小狂为大狂。由是利气既褪，霸气已成。</p>
<a id="more"></a>
<p>　　故凡学者必有气，气者必有狂，气生于悟道，狂生于赛道。广义而论，道有生于市者，有生于武者，有生于书者。故亦有商之气，将之气，儒之气。朱门肉臭谓之小狂，玉堂金马谓之大狂；荐守街亭谓之小狂，喝断长坂谓之大狂；笑说鸡肋谓之小狂，客居五柳谓之大狂。大狂者，必立其巅峰，俯仰天地，如君临天下，唯我独尊，又于其处世腹有海量，不为诽言所怒，不为危情所动。以凡人之躯，拥圣贤之灵，此之谓“半仙”。</p>
<p>　　夫狂者至尊至傲。察俗夫之偶运兮，嗤之以鼻；逢屈身之金帛兮，不动如山；遭喧尘之不解兮，隐耕桃林，非退也，不屑耳。然是人不屑者众，狂者寡，此余之大恨哉。</p>
<p>　　二〇一一年八月二十日于顺德</p>
<p>　　无瘾诗人</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　狂者，气也。&lt;/p&gt;
&lt;p&gt;　　腹满书而生气，气饱腹而自溢。溢者，狂也。大凡狂者，皆负才情。小才者狂，芥而锐目，倾国色之牡丹，决桎梏之洪流，落逸禽之飞矢，幻灯红之迷昙；大才者狂，瀚而磅礴，抟扶摇之棕榈，纳百川之沉渊，覆天地之浮云，忘光阴之大椿。小狂狂而毕露，鹗之眸，豹之尾；大狂狂而尽敛，鹏之羽，龟之甲。是故小才者，“狂”之左，兽之利器；大才者，“狂”之右，王之霸气。&lt;/p&gt;
&lt;p&gt;　　夫人之气宇，修于内而发于外，生于书而广于己。汲百家之精髓，融一身之秀气，生于混沌，化于雏形，表于世间。忽察人之修行，莫如己高；世之涵养，莫如己深，便滋狂傲之气，视弱者为蝼蚁，以自身为独秀，著狂论以傲世，搁礼仪于不顾，其小狂已成形。既而似韦编三绝，汗牛充栋，又品察人间情愫，世态百味，便始参天道，自成一体，饱藏宇宙天机，吐纳山川灵气，洞察时间轮回，包容天地万物，融有形于无形，化小狂为大狂。由是利气既褪，霸气已成。&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="骈文" scheme="http://yoursite.com/tags/%E9%AA%88%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>ゼロから日本語を勉強しましょう！</title>
    <link href="http://yoursite.com/2017/07/15/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%EF%BC%81/"/>
    <id>http://yoursite.com/2017/07/15/ゼロから日本語を勉強しましょう！/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-11-29T10:41:07.975Z</updated>
    
    <content type="html"><![CDATA[<p>七月十四日/晴れ</p>
<p>これはおれの気まぐれかもしれない。まあ、とりあえず、おれの日本語学習プログラムは復活だ！めでたしめでたし。</p>
<p>教材は「みんなの日本語」を選べます。「新标日」と「新编日语」両方も勉強してみました、前者の文法が変、後者の文法はただしがつまらないです（さすが大学の教材）。それで、「みんなの日本語」を試しましょう。</p>
<a id="more"></a>
<p>日本語の日記もよく書くしよ、難易度高いけど、頑張ってみよう！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七月十四日/晴れ&lt;/p&gt;
&lt;p&gt;これはおれの気まぐれかもしれない。まあ、とりあえず、おれの日本語学習プログラムは復活だ！めでたしめでたし。&lt;/p&gt;
&lt;p&gt;教材は「みんなの日本語」を選べます。「新标日」と「新编日语」両方も勉強してみました、前者の文法が変、後者の文法はただしがつまらないです（さすが大学の教材）。それで、「みんなの日本語」を試しましょう。&lt;/p&gt;
    
    </summary>
    
      <category term="日本語" scheme="http://yoursite.com/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"/>
    
    
      <category term="日本语" scheme="http://yoursite.com/tags/%E6%97%A5%E6%9C%AC%E8%AF%AD/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>少年守志说</title>
    <link href="http://yoursite.com/2017/07/12/%E5%B0%91%E5%B9%B4%E5%AE%88%E5%BF%97%E8%AF%B4/"/>
    <id>http://yoursite.com/2017/07/12/少年守志说/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-12-29T14:26:00.777Z</updated>
    
    <content type="html"><![CDATA[<p>　　守志如填海，未见其满而日有所满；辍志如易途，日有所行而未见其远。然时之少年，辍志者众，守志者寡。人是如此，国何以堪！逢五四之佳节，得总理之劝语，概时下之短志，寄文章以励子。</p>
<p>　　少年守志，曦升碧瑶之霄；中年守志，日受骄云之蔽；老年守志，夕落东去之江。夫少年者，其心也万壑，其力也金刚，其智也灵狐，其气也长江。少不守志，更待何时？</p>
<p>　　然，心怀万壑则易好高骛远；力赛金刚则易不分放矢；智比灵狐则易恃才傲物；气若长江则易不拘礼节。是故少年常立志者众，立长志者寡。少年守志者，心虽高而专一，力虽沛而有度，智虽明而谦逊，气虽浩而收敛。</p>
<a id="more"></a>
<p>　　年少则利于耐守志之艰难，守志则利于改年少之浮夸。年少守志，不亦齐美乎？</p>
<p>　　然守志非易事。</p>
<p>　　伴山脚仰其入云而未见其顶！能不骇而却步？攀山腰水囊已空而未见溪泉，能不疲而止步？爬山颈寂寥已久而未见人影，能不忧而停步？守志难，难于上青天。伟长十八学理，八十寒暑挑灯苦读；自清十二成文，二十春秋独自笔耕。嵇康恨而绝交，文举固而拒曹，鹏举愤而雪耻，渊明适而归田。孔丘贫教，史迁辱书。洛神之绣虎，彦和之雕龙；晋士特奇，可比一斑之豹；唐儒博识，堪比五总之龟。</p>
<p>　　其山虽高，登其峰者未见其少；人虽非少，登峰之径未见其顺。此等人也，年少而起，耄耋而不惜。仰其峰高，骇而不弃！耐其水枯，累而不弃！苦其寂寞，忧而不弃！守志非易事，其长，苦，寂，无边，无路，无止，唯守一字，方能克之。</p>
<p>　　少年守志则国生根，愈根深而蒂固；少年辍志则国弃羽，欲高飞而无力。昔李斯《谏逐客书》道河海不择细流，故能就其深；今启超《少年说》道少年强则国强，少年富则国富。昔国之初长，只因昔之少年守志；而国之复兴，还需今之吾辈守志。吾之最高志乃国之志，吾守志后方能成国志。成国志者，非主席，非总理，少年也。</p>
<p>　　少年者，当以披荆斩棘无所惧怕之勇，隳山碎岩所向披靡之力，熊咆虎啸龙吟凤鸣之势，甘受疾苦永不言弃之心，守乘风破浪驰骋天下之志，守修身齐家淡泊名利之志，守治国安国富国强国之志！<br>　　<br>　　二〇一一年于顺德一中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　守志如填海，未见其满而日有所满；辍志如易途，日有所行而未见其远。然时之少年，辍志者众，守志者寡。人是如此，国何以堪！逢五四之佳节，得总理之劝语，概时下之短志，寄文章以励子。&lt;/p&gt;
&lt;p&gt;　　少年守志，曦升碧瑶之霄；中年守志，日受骄云之蔽；老年守志，夕落东去之江。夫少年者，其心也万壑，其力也金刚，其智也灵狐，其气也长江。少不守志，更待何时？&lt;/p&gt;
&lt;p&gt;　　然，心怀万壑则易好高骛远；力赛金刚则易不分放矢；智比灵狐则易恃才傲物；气若长江则易不拘礼节。是故少年常立志者众，立长志者寡。少年守志者，心虽高而专一，力虽沛而有度，智虽明而谦逊，气虽浩而收敛。&lt;/p&gt;
    
    </summary>
    
      <category term="文章" scheme="http://yoursite.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="骈文" scheme="http://yoursite.com/tags/%E9%AA%88%E6%96%87/"/>
    
  </entry>
  
</feed>
