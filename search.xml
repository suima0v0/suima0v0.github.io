<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[当代人血馒头——为什么香蕉如此便宜]]></title>
      <url>/2019/10/21/%E5%BD%93%E4%BB%A3%E4%BA%BA%E8%A1%80%E9%A6%92%E5%A4%B4%E2%80%94%E2%80%94%E4%B8%BA%E4%BB%80%E4%B9%88%E9%A6%99%E8%95%89%E5%A6%82%E6%AD%A4%E4%BE%BF%E5%AE%9C/</url>
      <content type="html"><![CDATA[<p>本文转自梁文道的文章<a href="https://mp.weixin.qq.com/s/I9Rf-QaV657tK98vqpSSIg" target="_blank" rel="external">《被「水果」支配的世界》</a>并有所修改，仅为<strong>个人笔记</strong>，若需转载至开放平台，请尊重原作者版权，与原作者联系。</p>
<blockquote>
<p>原作者：梁文道<br>源地址：<a href="https://mp.weixin.qq.com/s/I9Rf-QaV657tK98vqpSSIg" target="_blank" rel="external">https://mp.weixin.qq.com/s/I9Rf-QaV657tK98vqpSSIg</a></p>
</blockquote>
<h3 id="不应该便宜的香蕉"><a href="#不应该便宜的香蕉" class="headerlink" title="不应该便宜的香蕉"></a>不应该便宜的香蕉</h3><p>在水果价格如此昂贵的今天，香蕉依然能保持“平民水果”的亲民，是因为它的背后潜藏了太多隐形成本。所有看似“便宜”的东西，其实都有各自的代价。只是这种代价并不由我们承担，但却实实在在地有人在为这些成本买单。</p>
<p>近期所有水果的价格，都肉眼可见飙升。究其原因，一来可能是由于物价及各种物流成本不断攀升，二来则可能是受到极端天气的影响。但香蕉似乎没有受到影响，为什么呢？</p>
<p>首先，<strong>香蕉是人类消耗量和产量最大的水果</strong>，而且没有之一。即使在人类所有的农业作物里，它都可以排到产量的第四位，而前三位分别是小麦、稻米和玉米。位列前三的其实都是我们平时常见的主食，或者至少是中国人最常见的日常必要的主要热量来源。</p>
<p>那么，香蕉是怎么回事？<strong>事实上，香蕉也被全球很多地区人民当作一种主食</strong>，在亚洲和非洲有5亿人将它作为主要的淀粉质来源，尤其是那些较为贫困的地区。所以，香蕉虽然被我们称为水果的一类，但是在其他地区，它其实是日常生活中一种不可或缺的主食。</p>
<p>但关键的是，<strong>香蕉本质上是不适合作为主食的</strong>，原因之一是香蕉是一种非常不易保存的水果。我们应该都有类似的经验，香蕉买回后，放上几天很快表皮就会变黑，果肉变烂、变质。所以长久以来香蕉就在这些热带地区流转，却很难流传出去。</p>
<p>因为它是一种很不可靠的商品。它的成熟期太短了，对运输的要求极其高，比如需要高明的冷藏技术、现代运输设备以及基础建设，包括一整套复杂的物流过程、包装过程，甚至生产过程。所以，今天我们能在北京或者其他更远的北方地区吃到香蕉，其实依赖的是一种现代技术，这也是全球史能够带给我们的观点。</p>
<a id="more"></a>
<h3 id="曾经灭种的香蕉"><a href="#曾经灭种的香蕉" class="headerlink" title="曾经灭种的香蕉"></a>曾经灭种的香蕉</h3><p>首先，香蕉其实有非常多的品种，但是一旦要进行标准化、大量化生产的时候，水果公司往往就要做出选择，他们必然更倾向那些适合长期运输、适合保存、适合种植，最好还容易抵抗虫害的品种。</p>
<p>曾经就有一种香蕉可谓是香蕉中“王牌候选人”，即大麦克（Gros Michel）香蕉。直到1950年左右，大麦克还是全世界最主要的一种香蕉品种，除了东亚地区之外，欧洲美洲吃到的香蕉几乎都是这个品种。</p>
<p>但是，今天你可能再也吃不到这种香蕉了，<strong>它几乎已经绝种</strong>。因为大麦克遭遇了一场严重的疫病。这种疫病的源头，是一种叫做“尖孢镰刀菌”的真菌，它会寄生在香蕉根部，让香蕉产生黄叶病。</p>
<p>你可能会问，难道这个病没法依靠药物治疗？没法中止它的蔓延吗？这样一种病为什么能导致全球曾经产量最大的香蕉近乎灭绝？原因很简单，因为大麦克香蕉的一大缺点，是无法进行有性繁殖，它是“<strong>单一品种栽培</strong>”的结果。</p>
<p>由于全球的大麦克香蕉基因几乎完全一样，所以香蕉感染病菌的几率，以及抵抗病菌的能力也是一样的。如果你了解一点生物学，就知道这种<strong>单一品种栽培的作物种群，缺乏遗传多样性，它患上疾病的风险大大增加</strong>。也就是说，人类为了实现现代工业以及现代市场需求，就把水果的命运寄托在了“单一品种”上。</p>
<p>后来，水果公司找到了一种香蕉的替代品，也就是“华蕉”（Cavendish），也被称作“香芽蕉”。不过一旦得病，灭种也是迟早的事情。</p>
<h3 id="人类的解决方法"><a href="#人类的解决方法" class="headerlink" title="人类的解决方法"></a>人类的解决方法</h3><p>所以，人类的想出了一种低廉的方法：<strong>大量使用农药</strong>。今天全球几个主要的香蕉产地，比如中国其实也是个香蕉大国，尽管如此，我们生产的香蕉依然无法满足国内的市场需求，所以我们还要依赖菲律宾的香蕉进口。所以大部分香蕉出口国对香蕉是极度依赖的，他们最大的国民收入来源就是香蕉。一旦进出口贸易产生摩擦，他们<strong>国家的经济命脉就可能因此遭受严重打击，这也就是所谓，整个国家依靠单一经济的危险</strong>。 </p>
<p>这种举国种植香蕉，大量使用农药，会导致一个问题：<strong>长期接触农药导致男性不育</strong>。你或许会质疑为什么这些地方不做好防护措施、完善环保条件呢？他们几乎不会这么做。因为这些都要花钱。</p>
<p><strong>一旦加上这些成本支出，你认为香蕉的价格还能如此便宜吗</strong>？</p>
<p>更重要的是，当地控制香蕉出口命脉的水果公司，它们更不愿意花这个钱，毕竟这些公司连支付合理的工资都做不到，想要尽可能逃避。于是，这些地方的蕉农们在喷洒农药的时候，所有的防护措施就仅有手上的一块手帕。</p>
<p>为什么这些水果公司可以如此猖狂？对工人的健康问题置之不顾，也不理会生产地区的环境污染。难道他们不怕有人对此提起诉讼，难道不担心其他比较有良知的公司和他们进行竞争吗？</p>
<p>不，他们一点也不怕。首先，因为有良知的公司不会比他们更赚钱，也更谈不上竞争得过他们。而且重要的是，<strong>根本不存在什么竞争</strong>。</p>
<h3 id="垄断王国的《人血建国史》"><a href="#垄断王国的《人血建国史》" class="headerlink" title="垄断王国的《人血建国史》"></a>垄断王国的《人血建国史》</h3><p>从历史的眼光来看待香蕉的移动路径，为什么香蕉会从原产地非洲、东南亚或巴布亚新几内亚一带，流传到中美洲，而且今天的中美洲还是全球最重要的香蕉产地之一？</p>
<p>这就要说到哥伦布发现新大陆之后造成的一个现象，那就是“<strong>哥伦布大交换</strong>”——由于新大陆的发现，使得旧大陆（欧亚非）与美洲大陆之间的物种产生了交流。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g878045kd3j20u00gw0u5.jpg" alt="img"></p>
<p>其中之一被带到美洲去的物种，就是香蕉。中美洲的香蕉源自于1516年非洲加那利群岛的葡萄牙水手，他们把香蕉带到了中美洲，而且种植得很好。不过美国人吃上香蕉却并不是很早的事情，因为如之前所说，过去出口香蕉是非常困难的。那么，香蕉又是怎么样进入美国市场的呢？</p>
<p>这就要提到19世纪末的时候，一位美国商人Minor C. Keith，他跑到中美洲的哥斯达黎加拿到了政府合约，帮他们修建铁路。结果当地政府却因为缺钱欠账，于是就和这位商人签了一份合约——政府将铁路沿线的土地租给商人，时长为99年，几乎就像租界一样，铁路修到哪，沿线的土地就都归商人所有。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g8780brqvpj204o068q2x.jpg" alt="img"></p>
<p>商人这时想到了一个绝招，他在新到手的土地上开始种植香蕉。因为香蕉热量高，还是一类淀粉的来源，这位商人就把香蕉当成伙食提供给修建铁路的工人们吃，替代了工人的薪水，于是养活铁路工人的成本就大大降低了。以至于后来，这家以运输起家的公司还逐渐改行了，变成了一家卖水果的公司。</p>
<p>因为公司发现，修建铁路根本赚不来什么钱，但是<strong>大量种植的香蕉可以把它们运回美国卖钱</strong>。不仅如此，在这个过程中，透过香蕉产业还诞生了我们现代食物运输中必须的<strong>冷藏技术</strong>。世界上最早开始出现这种食物运输的冷藏技术，就是20世纪初，为了从中美洲运输香蕉回美国开始的。由于需要大量运输香蕉的船只，公司甚至开始自己<strong>经营船队</strong>。最终经历几轮并购，几家并存的公司就合并成为了“联合果品公司”。</p>
<p>当公司生意越做越大，光让工人们吃香蕉早已无法满足他们的需要，还是得向他们发薪水。但是公司又想出一个办法，既然要给工人们发薪水，他们以及家人还都住在种植园里，他们也要消费、购买食物，那公司干脆<strong>办起了宿舍、经营房地产，建设各种设施，还办合作社</strong>。</p>
<p>工人们要买东西，要消费，就得向这些合作社购买，合作社里的物品又是由公司的船队从美国运回来的。也就是说，他们船队从中美洲运香蕉到美国，回来时肯定不能空船而归，于是就从美国运各种物资、大量廉价的工业化食物和产品回来，再卖给种植园的工人们。于是，<strong>大量的金钱就在整个公司内部滚滚流动，不断循环</strong>。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g8780keliuj20u00jwdjr.jpg" alt="img"></p>
<p>当产业发展到极为庞大，联合果品公司和另一家标准果品公司，它们所控制的中美洲果园面积，已经超过了任何一个中美洲国家所控制的土地，而它们拥有的财产几乎可谓富可敌国。<strong>而实际上这些公司已经如同一个小的国家一般在运作</strong>。</p>
<p>这两大水果公司，把整个香蕉产业垄断在手，透过种植、出口香蕉，通过运输产业等种种手段，把整个中美洲变成了自己的殖民地。而且，这些公司当时又全都是美国公司，因此从这个意义上而言，美国是真的能够将中美洲当成自己的后花园。 </p>
<p>又由于是垄断性产业，当地政府也拿他们没办法，<strong>当地政府由于太穷困，还必须吸引这些公司的投资，于是不断给他们更多土地，给予他们更多特权和优惠</strong>。这些水果公司，堪称“国中之国”，权力早已大过几个中美洲国家的政府。</p>
<p>对于工人而言，如果不帮水果公司打工，他们几乎就没有了其他生路，就连自己国家的政府都和这些公司签订了独家合约，工人们根本不可能自己开辟香蕉种植园，只能为这些公司打工。当只有一个老板可以为他打工的时候，你也可想而知他们的生活处境将会如何。</p>
<h3 id="扶植独裁政权"><a href="#扶植独裁政权" class="headerlink" title="扶植独裁政权"></a>扶植独裁政权</h3><p>1951年，危地马拉出现了历史上第一位民选总统——哈科沃·阿本斯，在他上台之后，便宣布把联合果品公司在危地马拉25万英亩的闲置土地收归国有。尽管当时联合果品公司在危地马拉占有土地面积是整整400万英亩，占整个国家可耕地面积的七成，但联合果品公司认为阿本斯这一举动极大触动公司的利益。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g8780taetyj20mg0ir760.jpg" alt="img"></p>
<p>于是，当年与联合果品公司关系密切的部分美国政府重要人物，在1954年6月，策动危地马拉流亡份子组成的雇佣军从邻国洪都拉斯武装入侵、危地马拉境内武装部队首脑叛乱，终于<strong>推翻了危地马拉合法的民选政府，扶植亲美独裁政权上台</strong>。 </p>
<p>所以，中美洲终于有一个国家忍无可忍，要发起反抗——那就是<strong>古巴</strong>。当时古巴的领导人卡斯特罗要发起革命，其实也和香蕉以及水果公司有关。</p>
<p>今天，几乎全世界的香蕉都十分便宜。而它便宜的理由之一，是因为它是很多国家的主要经济来源。当一个国家的经济，相当大一部分都是依靠香蕉这种作物的时候，这些国家在这件事情上的议价能力也会变得相当低。 </p>
<p>看下近代的香蕉史，可以发现我们吃进肚子里的任何一样看似简单的食物，其实都不只是那么简单而已，也都不是孤立的。它在全世界范围内不断移动，甚至能够造成许许多多相当复杂的全球政治经济的影响及后果。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文明根源探究课题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于墨西哥举国禁毒难的原因]]></title>
      <url>/2019/10/21/%E5%85%B3%E4%BA%8E%E5%A2%A8%E8%A5%BF%E5%93%A5%E4%B8%BE%E5%9B%BD%E7%A6%81%E6%AF%92%E9%9A%BE%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>本文转自知乎用户<a href="https://www.zhihu.com/org/qing-meng-xiao-shuo/activities" target="_blank" rel="external">轻萌小说</a>于问题<a href="https://www.zhihu.com/question/21613982" target="_blank" rel="external">《墨西哥毒贩为什么这么嚣张，可以和军队对抗？》</a>的回答并有所修改，仅为<strong>个人笔记</strong>，若需转载至开放平台，请尊重原作者版权，与原作者联系。</p>
<blockquote>
<p>原作者：轻萌小说<br>源地址：<a href="https://www.zhihu.com/question/21613982/answer/309573394" target="_blank" rel="external">https://www.zhihu.com/question/21613982/answer/309573394</a></p>
</blockquote>
<p>先说结论：墨西哥陷入到如今的乱象，是<strong>精英集团集体背叛国民</strong>导致的结果，对底层贫民来说，毒贩集团反而是他们重要的经济来源，所以墨西哥无法根除贩毒集团，因为得不到民众的完全支持。</p>
<h3 id="种植毒品解决温饱问题"><a href="#种植毒品解决温饱问题" class="headerlink" title="种植毒品解决温饱问题"></a>种植毒品解决温饱问题</h3><blockquote>
<p>信息来源：《墨西哥禁毒政策及其对中国的启示》<br>在墨西哥农村就业状况堪忧的情况下，许多农民为增加收入非法种植罂粟和大麻。在顺利收割的情况下，种植一公顷罂粟和大麻的收入是在40万比索，而种植一公顷玉米的收入仅为 1. 2 万比索。<br>此外，贩毒集团还会为农民支付每天 300 比索的工资，而种植玉米的农民的日工资仅为 54 比索。</p>
</blockquote>
<p>经济利益让农民支持或者帮助毒贩集团，成为了他们最为坚实的后盾，为毒贩种植大麻，为毒贩提供情报，为毒贩集团提供物资。</p>
<p>换句话说，<strong>墨西哥政府不单单是在对抗毒贩集团，而是在对抗墨西哥广大的贫困人口</strong>，而这是墨西哥最为致命的社会问题。</p>
<h3 id="自由贸易摧毁本地农业"><a href="#自由贸易摧毁本地农业" class="headerlink" title="自由贸易摧毁本地农业"></a>自由贸易摧毁本地农业</h3><p>1994年，墨西哥加入北美自由贸易区，这一天对于墨西哥农民来说，是一个灾难性的日子，尤其是种植玉米的小农。</p>
<blockquote>
<p>信息来源：《墨西哥的农业改革和农民动员1982-2000年》<br>据统计，1989年，美国生产一吨玉米和菜豆的成本分别是92．74美元和219．53美元，而墨西哥则为258．62美元和641．17美元。1992年美国对墨西哥的出口玉米价格仅为墨西哥国内保护价格的一半。<br>墨西哥玉米的平均产量为每公顷1．7吨，而美国为每公顷6．9吨。技术、补贴、基础设施、气象服务等方面的巨大差异也使墨西哥的玉米生产者无力与美国展开竞争。</p>
</blockquote>
<p>如此实力鸿沟，按照正常的经济逻辑推理，美国一旦对墨西哥进行大规模玉米倾销，那么墨西哥农民就会大规模破产，这是理所当然的事情。</p>
<p>所以在谈判的时候，墨西哥跟美国在玉米进口方面，是有15年的保护措施，并且进行了限额，一旦美国出口到墨西哥的玉米超过一定额度，最高可以征收215%的关税，足够保护墨西哥农民了。</p>
<a id="more"></a>
<blockquote>
<p>信息来源：《北美自由贸易协定对北美农产品贸易的影响》<br>在北美自由贸易区协议执行的第一年，美国谷物可以免税进入墨西哥的最高限额为250万t。超过限额部分的玉米将被课以215%的重税。该项条款的过渡期为15年，每一年将增加3%的免税限额，同时降低超额部分的税率。</p>
</blockquote>
<h3 id="政府的算盘"><a href="#政府的算盘" class="headerlink" title="政府的算盘"></a>政府的算盘</h3><p>但是非常幽默的事情出现了。这个保护关税根本就没有执行！</p>
<blockquote>
<p>信息来源：《墨西哥的农业改革和农民动员1982-2000年》<br>自协定生效以来，墨西哥每年进口的玉米总是超出指定的配额。政府应对超出部分征收超额进口税，但实际上所有的进口玉米都是免关税的。《北美自由贸易协定》规定，在15年的时间内逐步取消玉米关税，但是墨西哥政府在1994年1月到1996年月，即30个月内便取消了关税。期间，玉米价格下跌了48％。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g8781nghdcj20k00gagn7.jpg" alt="img"></p>
<p>从94年到07年的进口量与关税来看，这个关税基本没有征收。也就说，墨西哥农民在一瞬间就被丢到了世界最强大的美国农业集团面前，跟他们明晃晃地拼刺刀。令人心寒的就是，墨西哥政府是故意这么做的：</p>
<ol>
<li>墨西哥国内拥有<strong>强大的食品加工集团，畜牧业集团</strong>，对于他们来说，廉价的玉米意味着更低的成本，能够提高他们获得的利润，也能够用来打压国内的玉米价格。<strong>他们用金钱游说政府，直接敞开大门，让美国玉米肆无忌惮地涌入墨西哥</strong>。当然这样的理由是不能摆到台面上来的，墨西哥政府宣称不限制美国玉米是为了降低粮食价格，提高人民的生活水平。</li>
<li>1992年，墨西哥推行了土地所有制改革，实行<strong>土地私有化</strong>，推动土地流转。如果配合这一条政策来看，用心就十分明显了，就是为了<strong>让小农破产，然后让土地集中起来，交给更有管理能力，有资本的大农场来经营，提高土地利用率</strong>。</li>
</ol>
<p>当时的墨西哥总统卡洛斯·萨利纳斯如此宣称道：“土地分配在过去是实现公正的途径，今天是非生产性的和贫困的根源。”看到这句话，墨西哥政府在想什么，一目了然：通过美国玉米，<strong>打垮墨西哥国内的小农</strong>，将土地集中起来，提高农业产值，然后失去土地的农民还可以进城打工，为转接制造业提供源源不断的劳动力，廉价的美国玉米还可以降低食品价格，提高人民福利。</p>
<p>更加精明的是，墨西哥政府也担心一次性冲垮玉米产业，所以实行了扶持政策，简单来说就是土地越多，补贴越多。控制着补贴的政府，可以根据需要减少补贴，将破产小农控制在一定的范围内。</p>
<h3 id="令人咋舌的结果"><a href="#令人咋舌的结果" class="headerlink" title="令人咋舌的结果"></a>令人咋舌的结果</h3><p>与经济学家预测的现实相反，墨西哥农民并没有放弃种植玉米，去种植热带水果等更有利润的农产品。恰恰相反，在加入北美自由贸易区之后，在玉米价格跌幅高达48%的情况下，<strong>墨西哥的玉米产量是增加的！</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g8781vakz7j20k00d70zq.jpg" alt="img"></p>
<p>经济学家纷纷表示这种现象无法理解，跟逻辑推理完全相反，到底是哪里出问题了，明明种植热带水果更有利润，农民为什么不去种。</p>
<p>其实原因很简单，假如你问民国时期农民，种粮食不挣钱，为什么不去种咖啡呢，咖啡更值钱,民国农民一定一巴掌抽死你。他们没有选择，没有钱去选择。种植玉米他们有经验，有生产工具，土地也更为合适，可一旦去种植热带水果，先不说发财的事情，土地适不适合种热带水果，一旦一年歉收，等待他们就是死亡。所以墨西哥农民默默地承受住了玉米价格冲击，努力增加产量来弥补损失，尽管不能弥补全部损失，但到底扛下来了。</p>
<p>于是他们更贫困了，徘徊在生死边缘，也更倾向于种大麻，毕竟这个不同于墨西哥政府鼓吹的热带水果，大麻是有贩毒集团保证，旱涝保收，你去种还给你工资，还管饭。更幽默的是，玉米价格不断下降，产量不断增加，但墨西哥的主食，玉米饼价格不断上涨。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g878233u9cj20k00gagn7.jpg" alt="img"></p>
<p>从1994年到1999年，墨西哥人民的主食，价格上涨了差不多五倍以上。是什么导致了玉米价格下滑，玉米饼价格不断上升这种神奇的经济现象？这里涉及到玉米饼的制作流程：玉米饼是墨西哥人民的主食，玉米饼的流程如下:</p>
<p><strong>玉米——玉米粉——玉米饼</strong></p>
<p>而墨西哥的玉米粉被控制在两家垄断公司手中。有钱不赚王八蛋，这就叫资本主义。更可怕的是，墨西哥政府以维持粮食价格稳定的名义，给了两家公司，一家GINSA，一家NINSA，这两家企业巨额的财政补贴，一年几十亿比索。由于玉米饼价格的快速上涨，墨西哥政府在城市制造了另外一个贫困阶层，那就是<strong>墨西哥城市贫民</strong>。而城市贫民为贩毒集团源源不断地提供贩毒物流服务，以及杀手。</p>
<h3 id="最终的对手"><a href="#最终的对手" class="headerlink" title="最终的对手"></a>最终的对手</h3><p>所以现在回过头来看，墨西哥政府的军队不仅仅是对抗贩毒集团，他对抗的是墨西哥两大赤贫阶层。</p>
<ol>
<li><p><strong>被玉米价格下降打击到生死边缘的农民</strong>。</p>
</li>
<li><p><strong>被粮食价格上涨吞噬掉一切的城市贫民</strong>。</p>
</li>
</ol>
<p>所以说，墨西哥政府的算盘不仅彻底破产，还造成了社会的严重割裂。这就能够解释我们为什么会听到多样的墨西哥：经济发达，人力成本低廉，人均GDP高，人均收入低，以上四条全部成立。而赤贫阶层，极不平衡的社会结构，正是墨西哥的主要矛盾。这个矛盾不解决，谈何消灭贩毒集团，也只是治标二不治本。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文明根源探究课题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于中东地区战乱不断之根本原因]]></title>
      <url>/2019/10/20/%E5%85%B3%E4%BA%8E%E4%B8%AD%E4%B8%9C%E5%9C%B0%E5%8C%BA%E6%88%98%E4%B9%B1%E4%B8%8D%E6%96%AD%E4%B9%8B%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>本文转自知乎用户<a href="https://www.zhihu.com/people/ni-cai-ni-cai-ni-cai-cai-cai-76" target="_blank" rel="external">你猜你猜你猜猜猜</a>于问题<a href="https://www.zhihu.com/question/275692465" target="_blank" rel="external">《为什么美国总是对俄罗斯穷追猛打？》</a>的回答并有所修改，仅为<strong>个人笔记</strong>，若需转载至开放平台，请尊重原作者版权，与原作者联系。</p>
<blockquote>
<p>源作者：你猜你猜你猜猜猜<br>源地址：<a href="https://www.zhihu.com/question/275692465/answer/808525166" target="_blank" rel="external">https://www.zhihu.com/question/275692465/answer/808525166</a></p>
</blockquote>
<h3 id="中东实质：亚欧大陆桥"><a href="#中东实质：亚欧大陆桥" class="headerlink" title="中东实质：亚欧大陆桥"></a>中东实质：亚欧大陆桥</h3><p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g84p7phzkrj20k00b8myv.jpg" alt="img"></p>
<p>亚欧大陆，历史上大多数时间都是世界物质财富的中心，而中东则是极为重要的运输通道。大陆桥在历史上长期被阿拉伯人占据，阿拉伯人几乎承包了所有欧亚贸易，使其在地理大发现前全方位碾压欧洲。</p>
<p>人们往往认为海洋文明掌握了海权，就相当于掌握了全球贸易，可以控制全球重要的港口、海峡、运河和出海口，可以不受地理限制，随时投送国家力量等等。但其实<strong>海权的核心是财富运输，也就是海运，不然称霸大海就是桩赔钱的买卖</strong>，就像郑和下西洋。问题在于：<strong>财富的生产地不在海上，而在大陆</strong>。</p>
<p>算工农业产值的话，欧亚大陆是妥妥的世界财富中心。所以<strong>只要某个大陆国家控制了欧亚大陆，物流人流构成了完整的内循环，市场和贸易被统一，海权国家的军舰就会成为无本之木</strong>。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g84pd7drqaj20k00cb3zq.jpg" alt="img"></p>
<p>当年苏联在的时候，链接世界财富两端的欧亚大陆桥北方部分，几乎被华约承包完了，欧洲被堵得死死的，想出来只能走大海，只能抱海洋霸主美国的大腿。</p>
<p>所以海权国家，比如英国、美国，要么就是操纵大陆均衡，要么就是煽风点火，到处搞国家分裂和民族、宗教独立，甚至脱欧使绊子，目的就是防止某个陆权国家称霸、统一大陆，或者结成铁板一块的同盟。</p>
<a id="more"></a>
<h3 id="陆权国家与海权国家的纠结"><a href="#陆权国家与海权国家的纠结" class="headerlink" title="陆权国家与海权国家的纠结"></a>陆权国家与海权国家的纠结</h3><p>海权国家在大多数时候，只会把陆权国家作为第一假想敌而不是其他海权国家，因为海权强国只有第一，第二强国毫无意义。</p>
<p>因为大海不同于陆地，陆地可以割据，可以拉扯，打不过还可以钻山钻林子。陆战可以做到拿起枪就打仗，放下枪就种地，搭个小土窑就能造大炮。</p>
<p>而海战不行，歼灭海军后封锁码头、船坞，摧毁造船厂，任你国力再强，连再战的可能性都没有了。大海一望无际，一马平川，无处躲藏，天时地利人和都不再重要，拼的就是硬实力。在航海技术比较发达的今天，如果两个海权国家发生战斗，那一定是歼灭战，没有余地。大海是公平的，哪里的大海都是一样，能在大西洋歼灭你，换到太平洋也一样。马六甲能封锁你，换到缅甸、巴基斯坦、亚丁湾一样能封锁你。在直布罗陀打不过英国，换到马岛也是挨揍的命。</p>
<p>所以说<strong>陆权国家，脱离大海，在真正生产财富的土地上玩合纵连横，天生就是海权国家的敌人</strong>。</p>
<p>海权国家无法彻底占领陆权国。海权国家的本质是岛国，美国也是个大岛。如果岛国硬生生的在大陆上占一块根据地，其成本将成倍增加，从根本上改变行政开支结构，其结果就是无力维持海上强权，同时在大陆上也会力不从心。对于大陆上的势力范围，海权国家只能抱着得知我幸失之我命的殖民地态度，尽可能从海上向他国施加压力，从而保住殖民地。维持一艘不沉的航母，比维持10艘说沉就沉的航母，其成本之高不可数计。</p>
<p>但陆权国家在相当长的时间里，都是很弱势的。主要原因在于陆路机动困难，物流成本高，势力范围犬牙交错。陆战没法做到海战那种赢家通吃，今天你占了西班牙，人家跟你打游击，无论你实力有多强，一场莫斯科或者滑铁卢就被打回原型。例如：法国大革命后，民族国家兴起。外加人口流动差，当地或明或暗的小团体抱团，让你这个外来占领者针插不进，水泼不入，不但不能获利，反而被吸血，占领一块地方，一块地方就会变成你帝国身上的烂疮。</p>
<h3 id="火车的完善加强印度洋地位"><a href="#火车的完善加强印度洋地位" class="headerlink" title="火车的完善加强印度洋地位"></a>火车的完善加强印度洋地位</h3><p>这一切想要改变，要等到火车的完善。</p>
<p>火车，这哪是马车的升级版，这就是在路上开的船。只要大家伙把铁路修通，成本降下来，就能携手迈入工业化社会。工业革命解决了财富生产问题，铁路解决了财富流通消费问题，再打仗得等到第二次工业革命后的一战和二战，而后彻底推翻封建王权和殖民地社会，改造生产关系和社会结构，以适应新的生产力。大陆国家便能摆脱大洋的束缚。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g84pv2v8xwj20k00bi40p.jpg" alt="img"></p>
<p>如果这些铁路都修成了，物流周期会缩短很多，带来的是成本的降低和资本流转的增快，那么谁最急？这里就可以看出巴尔干和中东的战略价值。<strong>巴尔干和中东的稳定是陆权国家最热切的盼望，也是海权国家的噩梦</strong>。这里海权国家有两个办法，第一就是也要修铁路，修的更多更快，提前把陆地之舟把握在自己手中，所以英国人对给外国修铁路特积极。第二就是打压陆权国家，在大陆捣乱。</p>
<p>所以，印度洋显得尤为重要。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g84qh18y9kj20nq0d1qd4.jpg" alt=""></p>
<p>由于大国林立两岸，所以大家对太平洋和大西洋比较熟悉，曝光率也比较高。但<strong>事实上世界的中心大洋，也就是沟通欧亚大陆的大洋是印度洋和地中海</strong>。</p>
<p>印度洋一头是苏伊士运河，链接欧洲内海：地中海。另一头通过马六甲海峡沟通东亚与太平洋。同时印度洋囊括波斯湾，也就是中东石油的出海地。可以说世界上最重要的几条贸易路线都在印度洋上，可谓的印度洋者得欧亚。</p>
<p>控制大洋，离不开沿岸的港口和补给。所以扼住印度洋，就那么两个方案，<strong>一是进中东，二是进南亚次大陆，也就是印度，这是英国的做法</strong>。</p>
<p>而<strong>俄罗斯两百年来始终图谋的与英国不同方向，就是控制中东、东欧和中亚，打通欧亚大陆，减少大洋的束缚</strong>。俄国跨欧亚大陆，始终对中亚虎视眈眈，可南下印度，可西进中东。另一头暴揍土耳其，瓜分巴尔干，力图进入地中海，进而控制苏伊士。这种横跨欧亚，随时准备拿下东欧、中东和中亚，进而进入到印度洋，即使不涉及印度洋，单单这陆地贸易枢纽的地理位置，外加铁路的加持，在海权国家眼里就是原罪。</p>
<h3 id="世界中心的中心"><a href="#世界中心的中心" class="headerlink" title="世界中心的中心"></a>世界中心的中心</h3><p>无论是一战还是二战，乌克兰危机还是克里米亚抑或是叙利亚，历史总是这么相似，无非新瓶装旧酒。无论俄国还是西方国家都想霸占东欧、中东和中亚，<strong>这个世界中心的中心</strong>。</p>
<p>海权国家绝不会允许这里出现一个强权，更不允许从政治或者版图上统一这里的政权出现，所以这个地方，只能是越乱越不可收拾越好。</p>
<p>这，就是战火的根源。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文明根源探究课题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【GTA5】当你玩了100小时GTA之后]]></title>
      <url>/2019/10/19/%E3%80%90GTA5%E3%80%91%E5%BD%93%E4%BD%A0%E7%8E%A9%E4%BA%86100%E5%B0%8F%E6%97%B6GTA%E4%B9%8B%E5%90%8E/</url>
      <content type="html"><![CDATA[<p><div class="resp-container"></div></p>
<p><iframe class="resp-iframe" src="https://player.bilibili.com/player.html?aid=71783667&cid=124385435&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><br>吐槽：许久前的视频</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 视频 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于中西方文明发展逻辑的简明梳理]]></title>
      <url>/2019/10/19/%E5%85%B3%E4%BA%8E%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E6%98%8E%E5%8F%91%E5%B1%95%E9%80%BB%E8%BE%91%E7%9A%84%E7%AE%80%E6%98%8E%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>本文主要观点来源于金灿荣政委于港大的《风云变幻下的中美关系与世界格局》讲座、于观天下讲坛的《未来10年的世界大变局》讲座，以及温铁军老师于人大的《东西方文明的不同和对西方灌输给东方的观念的反思》讲座整理，并在论据部分作补充。（针对文章第二部分所述的中世纪人文情况，可通过动画「狼与香辛料」、「海盗战记」以及游戏「巫师三」等较为形象地了解）</p>
<blockquote>
<p>金灿荣：<a href="https://www.youtube.com/watch?v=VR6iYQeSAVI&amp;t=2s" target="_blank" rel="external">《风云变幻下的中美关系与世界格局》</a><br>金灿荣：<a href="https://www.bilibili.com/video/av12710403?from=search&amp;seid=6449248592431508660" target="_blank" rel="external">《未来10年的世界大变局》</a><br>温铁军：<a href="https://www.bilibili.com/video/av1379559?from=search&amp;seid=13713915535577086728" target="_blank" rel="external">《东西方文明的不同和对西方灌输给东方的观念的反思》</a></p>
</blockquote>
<h3 id="古代中国文明的产生及发展"><a href="#古代中国文明的产生及发展" class="headerlink" title="古代中国文明的产生及发展"></a>古代中国文明的产生及发展</h3><p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80b885kacj20hs0ci75j.jpg" alt="img"></p>
<p><strong>中国的农业发展起源于四川盆地水稻种植</strong>，四川盆地地势平坦，是热带季风气候，受到太平洋与印度洋夏季风的水汽滋润，形成丰富降水，天然适宜水稻生长。</p>
<p>但由于四川盆地地势较低，大江大河多流经此地，加上夏季青藏高原冰雪融化与降水频繁，所以此地必然是洪涝灾害严重地区。这也导致了，<strong>中国的农耕文明，必然起源于水利灌溉模式下的村社文明</strong>。大禹治水便有所揭示，谁最懂治水，谁便是该文明下的最高领导人。以疏代堵也作为中国哲学影响至今。</p>
<p>因此村社模式中的几大生产特征，奠定了中华民族与西方世界不同的价值观与主要行为基础：</p>
<ol>
<li><p>家庭是基本的生产单位，而温饱问题需要大量人力耕作，所以<strong>农耕时代家庭对生孩子的数量有着严格的KPI考核指标，所以有“不孝有三无后为大”</strong>。</p>
<a id="more"></a>
</li>
<li><p>土地是基本的生产资料，所以中国是不认神的，只认土地，只为土地打架。<strong>抢了土地生了孩子之后就要在家耕地，所以就有“父母在，不远游”的孝道文化</strong>。所以中国的刑罚就是流放三千里，让你死后不能跟父母一起，永远是孤魂野鬼，对中国人来说很凄惨，宁愿割头也不去。</p>
</li>
<li><p>中国家庭儿子女儿多，必然会产生矛盾，<strong>所以中国传统的财产继承制必然是所有孩子平分家产，所以必然会产生“君君臣臣父父子子”的伦理约束</strong>。</p>
</li>
<li><p>农业耕作收到气候影响，时效性强。所以必然要求在有限时间内，集中人力共同劳作，中国自古强调集体意识，加之中国地大物博，<strong>这也是战国的杨朱学派与五四运动所代表个人主义思潮无法完成统一中国思想的历史使命的原因</strong>。</p>
</li>
</ol>
<h3 id="古代西方国家海洋文明的产生及发展"><a href="#古代西方国家海洋文明的产生及发展" class="headerlink" title="古代西方国家海洋文明的产生及发展"></a>古代西方国家海洋文明的产生及发展</h3><p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80b8hluycj20g00esjsf.jpg" alt="Image result for 希腊文明 地图"></p>
<p>西方文明诞生于古希腊，其特殊的地理环境是塑造欧洲文化的重要原因。</p>
<p>欧洲平原破碎，土地贫瘠，不能生产小麦稻米等，所以粮食短缺；而因阳光充足，能种植高附加值的橄榄油，葡萄等；他们只能通过海路卖到亚细亚与北非交换粮食。<strong>地理形态决定商业形态，商业形态决定文化形态，这也决定了西方文明的本质是交易文化</strong>。贸易的发展还必然会带来法制的发展，因为双方不认识，贸易需要双方达成契约以保护贸易的有效性。同时，由于航海的物质条形难以估算，物理不确定性多，所以不许信一个神，在精神上保持确定性，古希腊出海前就要祭祀一下神（波塞冬）。另外，西方古代以采集狩猎为主，采集与狩猎需要强壮的身体，所以西方个人主义盛行，崇尚英雄主义。</p>
<p>因为商业交换强调大本金，本金充足才能增加利润，<strong>所以家庭财富不可分割，西方只能是长子继承制，土地有限，二子三子只能去海外殖民</strong>。在公元1453年，土耳其的奥斯曼帝国崛起，更是阻断了南北两条丝绸之路以及红海到地中海的贸易运输，这对中国无所谓，但对西方就阻断了经济来源。由于贸易，西方只能向西向南开辟海上贸易路线，开启大航海时代。</p>
<p><strong>大航海时代的地理大发现，也是西方文明对东方领先的开始</strong>。犹豫东欧被奥斯曼帝国垄断，所以西方只能往西往南远航，哥伦布发现新大陆（美洲大陆），麦哲伦绕地球一周，发现地球是圆的，<strong>地理知识以及大航海所需要的几何学，科学等瞬间超越东方国家，并迅速拉开知识差距</strong>。随后不久，西方人迅速占领北美、南美、大洋洲与非洲，<strong>在自然资源上也瞬间超过东方国家，并完成了资本主义的原始积累</strong>。</p>
<h3 id="近代殖民→大机器制造→工业革命→民主的诞生"><a href="#近代殖民→大机器制造→工业革命→民主的诞生" class="headerlink" title="近代殖民→大机器制造→工业革命→民主的诞生"></a>近代殖民→大机器制造→工业革命→民主的诞生</h3><p>为什么西方世界能比东方农业社会更快速积累现代化所需的财富，原因有几点：</p>
<ol>
<li><p><strong>海洋文明的战争的结果是赢家通吃（Winner takes all.）</strong>。不同于东方国家打仗为了占有土地，输了也可以退守千里，割让领土；海洋舰队没有土地，输了的一方船只被摧毁，财富被掠夺，财富会迅速聚集到强者手中。而负面结果就是导致贫富差距。</p>
</li>
<li><p><strong>神学影响所带来的的奴隶制提供了大量优廉劳动力</strong>。西方讲究个人主义，但人仅限于同宗教信仰者，异教徒不配为人，所以奴隶制的传统一直为西方提供了免费的终身劳动力。如爱尔兰，土地优渥，人民以农业为主，战斗力一直较差，就多次被维京人、英国人等疯狂蹂躏。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g80d2nscogj20gk09m400.jpg" alt="img"></p>
</li>
<li><p><strong>大航海时代殖民统治了世界绝大部分自然资源</strong>。比如英国，在全球七大洲都有它的殖民地，在英国的统治范围里不论何时都有领土处于白昼中，被称为“日不落帝国”。非洲，南美等世界各地的自然资源与奴隶被疯狂掠夺，组成了资本主义的原始积累。</p>
</li>
</ol>
<p>所以西方的工业革命是需求驱动的。<strong>大航海后西方世界控制的地盘是之前的11倍，但因西方的人口没增加，所以只能发展大机器提高生产力，随之经济效率与军事效率大幅领先东方</strong>。而西方民主也是来源于此。因为工业化，大机器制造，生产力需求量大，所以使得农村的人向城市聚集，基于经济需要<strong>城市化</strong>，而脱离乡村的个人的人生保护很弱，所以便<strong>民主化</strong>，前期的民主是捣乱的，所以需要完善，而后形成<strong>法制化</strong>。所以<strong>民主是工业化，城市化的产品，而不是前提</strong>。</p>
<h3 id="现代民间社会乱象的源头"><a href="#现代民间社会乱象的源头" class="headerlink" title="现代民间社会乱象的源头"></a>现代民间社会乱象的源头</h3><p><strong>民富差距是资本主义不断发展的天然产物，而中下阶层长期贫困且不可改变，就会长期不满，中下阶层长期不满就会出现民粹主义</strong>。在民粹主义出现之后，就会被资本势力或者政治势力利用，比如川普利用民粹上台，川普通过骂华尔街，骂富翁，骂出了美国贫困人民的心声，作为一个压迫工人的富翁，成功地成为了美国工人阶级的代表。香港，台湾的社会乱象亦是如是。</p>
<h5 id="私货"><a href="#私货" class="headerlink" title="私货"></a>私货</h5><p>在规则公平本身就是不公平的，同样的国际规则，但是由于体量不同，发展国家根本无法与发达国家同台竞技。同样的，看似公平的当代社会，却发生着很多令人啼笑皆非的现象：</p>
<ul>
<li>本国财阀最大的投资方是美国，本国不具备反抗驻扎美军的军事能力，财阀与政权民不可分，每一任想做出颠覆的总统都不得好下场。</li>
<li>企业家的亲属渗透到政治文化领域，地区无法产生能威胁财阀现有产业的先进新产业，外表上自称国际金融中心，却多次完美地拒绝以IT，生命科学等为代表的先进领域，高考前三甲的首选居然是牙医。</li>
<li>本国及企业家因为降低风险大量购入美元外汇，却随时遭受美国的贬值威胁。</li>
</ul>
<p>种种这样的情况与封建时代各朝走向覆灭的本质原因——土地兼并无本质上的区别，只不过是给人民披上了民主与自由的糖衣，本质上还是既得利益者不断蚕食无产阶级的社会价值。如今无法评价好坏，不过阿中同志现在走的这一条，真真是所有国家都没走过的道路。</p>
<p>Bon voyage.</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文明根源探究课题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在西装革履过年之后]]></title>
      <url>/2019/02/22/%E5%86%99%E5%9C%A8%E8%A5%BF%E8%A3%85%E9%9D%A9%E5%B1%A5%E8%BF%87%E5%B9%B4%E4%B9%8B%E5%90%8E/</url>
      <content type="html"><![CDATA[<p>如果没有这种小确幸，人生只不过是干巴巴的沙漠而已。<br>​                                                                                     </p><p align="right">—— 村上春树</p>    <p></p>
<p>5……4……3……2……1！新年快乐！那是春晚循例的倒数，是隔壁响起的鞭炮竹声，是纷至沓来的群发祝福提醒。整个中国都沉浸在新一年的喜庆中，至少，听起来确实如此。</p>
<p>不知道从什么时候开始，每年的这个时刻，心里突然会浮起一种名为<strong>「硌得慌」</strong>的情绪，不是疲惫于过年的种种繁琐，也不是担心各种亲戚长辈的问东问西。你一直想问，为什么别人对过年会那么期待，那么快乐。但其实，那个内心的幽灵真正想问的是：为什么<strong>你</strong>不像别人那样翘首以待，不像别人那样乐在其中？你很快便不愿深究，害怕与群体文化对抗，害怕心里慢慢失去社会性。</p>
<p>谁也不愿做那群快乐的绵羊中间那只皱眉的。</p>
<p> <img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkasnv7lj20go0as75h.jpg"></p>
<a id="more"></a>
<p>地球诞生之初并没有定义哪一刻是时间的分割线，各个国家对新年都有不同的定义，倘若我是国王，我会把新年定在<strong>冬天</strong>，迎接寒冷与苦难是多么具有浪漫主义的成就。如此看来，过年这个仪式对于王国来说还是有莫大的意义的。</p>
<p>过年也好，其他节日也好，于自然界而言毫无价值，仅仅是分割时间的虚线罢了。即便是生老病死这些对于生命而言如此重要的时刻，对于不解风情的自然界来说，也只是无序的随机序列而已。诚然，熵增是世界至高无上的自然规律，泼出去的水永远也不可能回到盆子里，事物的任何发展都是世界随着时间的流逝由秩序流向分散的过程。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkcce8szj20bo08j74a.jpg"></p>
<p>直到<strong>仪式</strong>的出现。</p>
<p>仪式的出现，是人类从自然界生物衍生出文明的标志。人类从无序的世界变迁中发现了感受与意义，生老病死、季节更迭等等在人类的感受力之下产生了新的意义。篝火的舞步，高亢的歌声，使人产生了区别于其他生物的精神力量，而这些精神力量，被编织成了<strong>浪漫</strong>的人类文明史诗。</p>
<p>仪式感，是一个略带矫情的词。但是正如《小王子》中的狐狸说到，“仪式感就是使某一天与其他日子不同，使某一时刻与其他时刻不同。” 我们大可不必成为羊群中的一员，但我们的一生中是否有某些独特的时刻，就像是天上的一颗星星，任由岁月流逝，你也一样可以很轻易地从回忆的夜幕里找到它，它若隐若现闪烁着的光芒，一定就是你与众不同的一生的意义所在。</p>
<p><img src="http://ww1.sinaimg.cn/large/b0fbd514gy1g0pkccehizj20go0ejq3m.jpg" alt="img"></p>
<p><strong>「</strong>Romantic<strong>」</strong>的解释是：<strong>富有诗意</strong>，<strong>充满幻想</strong>。仪式纪念的也应该是你充满诗意与幻想的时刻。西装革履过年的人，心里一定不是在过年。只要此刻的你是自由的、热情的，哪怕你穿着背心凉鞋去咖啡厅，也一定能找到属于你的仪式感。</p>
<p>因此，喝咖啡前，将杯子放到鼻子下嗅一下咖啡的香气，远比喝咖啡本身来得神圣。</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【黑魂3】今日份的PVP娱乐日常]]></title>
      <url>/2019/02/14/%E3%80%90%E9%BB%91%E9%AD%823%E3%80%91%E4%BB%8A%E6%97%A5%E4%BB%BD%E7%9A%84PVP%E5%A8%B1%E4%B9%90%E6%97%A5%E5%B8%B8/</url>
      <content type="html"><![CDATA[<div class="resp-container"><br><iframe class="resp-iframe" width="100%" heigh="100%" src="https://player.bilibili.com/player.html?aid=43477455&cid=76195319&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div>

<p>吐槽：老年人滴PVP</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 视频 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【黑暗之魂重置版】死亡与恶意集锦]]></title>
      <url>/2018/06/05/%E3%80%90%E9%BB%91%E6%9A%97%E4%B9%8B%E9%AD%82%E9%87%8D%E7%BD%AE%E7%89%88%E3%80%91%E6%AD%BB%E4%BA%A1%E4%B8%8E%E6%81%B6%E6%84%8F%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<div class="resp-container"><br><iframe class="resp-iframe" src="https://player.bilibili.com/player.html?aid=24424120&cid=41006275&page=1" scrolling="no" border="0" allowfullscreen="true"> </iframe><br></div>

<p>吐槽：喝元素瓶是吧，弹反是吧，你这小兵这么厉害怎么不去传火呢</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 视频 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[星星萤火虫绘本]]></title>
      <url>/2018/04/12/%E6%98%9F%E6%98%9F%E8%90%A4%E7%81%AB%E8%99%AB%E7%BB%98%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>小时候以为<br>星星是一只一只萤火虫化成的<br>萤火虫命中注定般渴望着月亮<br>彷徨在夜幕中渐明渐暗的光芒<br>是渺渺小小的简简单单的愿望<br>但在小孩心中<br>每一个星辰降落的夜晚<br>都显得那么的神圣</p>
<p>每每云层层叠叠地遮蔽月光<br>那是萤火最躁动的时候<br>它们忽然发现自己离月亮那样的遥远<br>它们慌张地寻找月光留下的蛛丝马迹<br>它们已经不能控制自己</p>
<a id="more"></a>
<p>夜晚如海平面般的宁静<br>小小的躯壳内却已波涛汹涌<br>思念在夜里肆意挥霍<br>拍打着礁石，发出哗哗的声音<br>仿佛连沉睡的大地都要唤醒<br>突然崖上的灯塔纷纷亮起<br>笔直的灯光连接了天空与海洋<br>像是温柔的声音，予躁动的心以虔诚的指引</p>
<p>点点微弱的光芒飞向天空<br>在迢遥的旅途中义无反顾<br>都说光是世上最快的速度<br>那么我能早点到你身边吗</p>
<p>当一道道汽笛声从远处传来<br>小孩望着连都市灯光都照不亮的天<br>数着数着，发现星星又多了一颗<br>看！<br>夕暮后的夜空，一闪一闪<br>这本久远的童话般的绘本<br>由萤火虫短暂的一生点缀而成</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗篇 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[雨陌生地落在柏油路上]]></title>
      <url>/2018/03/30/%E9%9B%A8%E9%99%8C%E7%94%9F%E5%9C%B0%E8%90%BD%E5%9C%A8%E6%9F%8F%E6%B2%B9%E8%B7%AF%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p>你似乎可以很轻易地清楚事物变化的因果逻辑，很平静地接受周遭所发生的事情；但在没人的某个时刻，你会突然陷入一种莫名的恐慌，你措手不及，你不了解这种情绪从何而来，到哪里去。</p>
<p>你读很多书，当书本成为了你的知识，但你的心灵并不能接受和理解这些；当书本成为了你心灵的慰藉，但你觉得这些对你毫无裨益。你害怕读书了，你不想听到两个声音在吵架。</p>
<p>于是你采取了一种最为稳妥的行事方式。你把事情小心翼翼地分成若干个节点，对每个节点采取不同选择所造成的后果进行预测。你早已习惯采用风险最少的做法，似乎这让你的理性和感性都能接受。</p>
<p>你终于发现，你习以为常的行事方式根本不是你的本意，仅仅是你对最坏结果做出的妥协。你意识到，这是多么愚蠢与虚伪。你的大脑开始批判，你的内心开始反抗，但是他们批判谁呢，这是他们都接受的，如果非要找一个批判对象，那么又要从大脑内心之外再割裂出一块来。</p>
<p>每个人都是知行合一的。</p>
<p>你一直对此深以为然，如今这些理解都近乎坍塌。或许只有程序才是知行合一的；或许世上所有事物与他人都是知行合一的，除了人自己不是。</p>
<a id="more"></a>
<p>不能理解自己的人如何能理解他人。甚至乎当你充满焦虑时写下的东西在若干个小时之后会变得那么的陌生，仿佛是经他人之手写出来的。或许这是由于人面对自己的时候都很脆弱，脆弱到潜意识里不断抗拒承认这就是自己。</p>
<p>你已经开始有所释怀了，脆弱真是最合理的理由，仿佛以上都可以用此解释得酣畅淋漓。你也不必再苦心竭力地谋求答案了，毕竟这会伤到脆弱的自己。</p>
<p>很显然，你不能接受这个结果。你还未能决定要把这克服掉，还是偶尔允许其存在。犹豫不决的时候总是痛的，不过也比麻木要好上一些。且痛且行，不失为一种真切的实感。这种实感，就陪我走上一会吧。</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(译)Kotlin 1.2 Released：Sharing Code between Platforms]]></title>
      <url>/2018/01/15/(%E8%AF%91)Kotlin%201.2%20Released%20%20Sharing%20Code%20between%20Platforms/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a>&amp;<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/</a></p>
</blockquote>
<p>今天我们正式发布Kotlin1.2。这是一个意义重大的版本，也是将Kotlin推广到现代化应用的各部件开发的关键一步。</p>
<p>在Kotlin1.1版本，我们正式<strong>将JavaScript纳入支持</strong>，你可以将你的Kotlin代码编译成JS并在浏览器运行。而在Kotlin1.2，你的代码可以<strong>在JavaScript和JVM中复用</strong>。现在只需要编写一次业务逻辑，代码就能在后端、浏览器前端、Android移动app中复用。我们也正努力开发能让你复用更多代码的库，例如跨平台序列化的库。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/cake3-1.png" alt=""></p>
<p>Kotlin1.2将集成在本周发布的<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA 2017.3</a>。如果你正在使用Android Studio或旧版本的IntelliJ IDEA，你可以在Tools | Kotlin | Configure Kotlin Plugin Updates中安装新版本。</p>
<p>本次更新包含了许多外部贡献者的成果，我们也感谢你们反馈和报告的问题，尤其是提交了PR的贡献者。</p>
<a id="more"></a>
<h2 id="跨平台项目"><a href="#跨平台项目" class="headerlink" title="跨平台项目"></a>跨平台项目</h2><p>一个跨平台的项目允许你使用相同的代码库去构建多个层面的应用程序 —— 后端、前端和Android app。这样的项目不仅拥有包含跨平台代码的<strong>通用模块</strong>，还拥有包含特定平台(JVM或JS)代码与能调用依赖于平台的库的<strong>特定平台模块</strong>。 要从通用模块中调用特定平台代码，可以使用<strong>预定义</strong> - 所有特定平台模块都需要提供实际实现的声明。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/MPP.png" alt=""></p>
<p>此特性的更多的说明，请查看此<a href="http://kotlinlang.org/docs/reference/multiplatform.html" target="_blank" rel="external">文档</a></p>
<p>正如同前面所说的，我们正致力于开发更多的库，供你将业务逻辑迁移到通用模块：</p>
<ul>
<li><a href="http://kotlinlang.org/api/latest/kotlin.test/index.html" target="_blank" rel="external">kotlin.test</a>能直接在Kotlin1.2中使用，只需写一次测试便可在JVM和JS中运行</li>
<li><a href="https://github.com/kotlin/kotlinx.html" target="_blank" rel="external">kotlinx.html</a>支持-<strong>同构渲染</strong>——使同样的代码在前后端渲染HTML</li>
<li><a href="https://github.com/kotlin/kotlinx.serialization" target="_blank" rel="external">kotlinx.serialization</a>允许你使用JSON或者ProtoBuf在应用程序的不同层之间序列化Kotlin对象</li>
</ul>
<p>请注意跨平台项目现在只是一个实验性的特性；这意味着虽然可以正常使用，但我们可能会在后续版本中更改设计（到时我们会提供工具迁移代码的）。</p>
<h2 id="编译的性能优化"><a href="#编译的性能优化" class="headerlink" title="编译的性能优化"></a>编译的性能优化</h2><p>在1.2版本的开发过程中，我们费尽心思去提升编译的速度。相比于1.1版本，我们达到了接近25%的提升，并且我们看到了能进一步优化的潜力，这将在1.2.x的更新版本中发布。</p>
<p>下图展示了两个使用Kotlin构建的大型JetBrains项目在编译时的时间差异：</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/CompilationSpeed.png" alt=""></p>
<h2 id="其他在语言和标准库方面的改进"><a href="#其他在语言和标准库方面的改进" class="headerlink" title="其他在语言和标准库方面的改进"></a>其他在语言和标准库方面的改进</h2><p>我们还对语言和标准库进行了一些小改进：</p>
<ul>
<li>在注解（常量数组）传递多个参数时<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#array-literals-in-annotations" target="_blank" rel="external">一个更简洁的语法</a>；</li>
<li><code>lateinit</code>现在支持全局或局部变量了，同时检查<code>lateinit</code>变量是否已经初始化；</li>
<li><a href="http://kotlinlang.org/docs/reference/whatsnew12.html#smart-cast-improvements" target="_blank" rel="external">智能转换</a>和<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#information-from-explicit-casts-is-used-for-type-inference" target="_blank" rel="external">类型推断</a>在某些情况的改善；</li>
<li>标准库现在可以兼容Java9中引入的拆分包限制</li>
<li>标准库引入了新的<code>kotlin.math</code>包</li>
<li>标准库新增了用于处理队列和集合的函数，其中有<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#windowed-chunked-zipwithnext" target="_blank" rel="external">一组函数</a>可以将集合或队列分解为可重复固定尺寸的组</li>
</ul>
<p>更多信息及示例代码，请查看<a href="http://kotlinlang.org/docs/reference/whatsnew12.html" target="_blank" rel="external">What’s New in Kotlin 1.2</a>文档页面。</p>
<h2 id="走向世界的Kotlin"><a href="#走向世界的Kotlin" class="headerlink" title="走向世界的Kotlin"></a>走向世界的Kotlin</h2><p>随着今年3月份发布了Kotlin1.1，Kotlin在全世界范围内受到了巨大的关注，这在<a href="https://kotlinconf.com/" target="_blank" rel="external">KotlinConf</a>上达到最高峰，这次会议于11月2、3号在旧金山举行，总共有12000名与会者。本次会议我们作了全程记录，视频在<a href="https://kotlinconf.com/talks/" target="_blank" rel="external">这里</a>。</p>
<p>Kotlin现在已经受到了Android开发的官方支持，并且集成到Android Studio3.0中，同时Google也提供了<a href="https://developer.android.com/samples/index.html?language=kotlin" target="_blank" rel="external">示例</a>和<a href="https://android.github.io/kotlin-guides/" target="_blank" rel="external">设计规范</a>。据统计，已有<a href="https://android-developers.googleblog.com/2017/11/update-on-kotlin-for-android.html" target="_blank" rel="external">超过17％的Android Studio 3.0项目</a>在使用Kotlin了，其中包括来自热门初创公司和500强公司的许多应用程序。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinConfUsers.jpg" alt=""></p>
<p>在服务器端，<a href="https://spring.io/blog/2017/09/28/spring-framework-5-0-goes-ga" target="_blank" rel="external">Spring Framework 5.0</a>已经支持许多<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/languages.html#kotlin" target="_blank" rel="external">Kotlin的特性</a>了，<a href="http://vertx.io/" target="_blank" rel="external">Vert.x</a>也从3.4.0版本开始<a href="http://vertx.io/docs/vertx-core/kotlin/" target="_blank" rel="external">支持Kotlin</a>。此外，Gradle现在也开始支持Kotlin DSL，<a href="https://github.com/gradle/kotlin-dsl" target="_blank" rel="external">Gradle Kotlin DSL</a>项目正以可观的速度迈向1.0版本。</p>
<p>GitHub上开源项目的Kotlin代码行数已经超过了2500万。 在Stack Overflow上，<a href="https://stackoverflow.blog/2017/10/31/disliked-programming-languages/" target="_blank" rel="external">Kotlin是增长最快，也是最少被讨厌的语言之一</a>。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinAdoption.png" alt=""></p>
<p>Kotlin社区的发展速度也快得让人惊叹。现已有100多个用户群体遍布世界各地，除开我们无法追踪到的讨论，就我们所知而绘成的<a href="http://kotlinlang.org/community/talks.html" target="_blank" rel="external">讨论分布图</a>能让你了解到世界哪些地方正在使用Kotlin。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KUGmap.png" alt=""></p>
<p>同时也有越来越多的<a href="http://kotlinlang.org/docs/books.html" target="_blank" rel="external">书籍</a>(包括我们的”Kotlin in Action”已被译成<a href="https://manning.com/books/kotlin-in-action" target="_blank" rel="external">英语</a>、<a href="https://dmkpress.com/catalog/computer/programming/java/978-5-97060-497-7/" target="_blank" rel="external">俄语</a>、<a href="https://www.amazon.co.jp/Kotlin%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-Dmitry-Jemerov/dp/4839961743/ref=sr_1_2?ie=UTF8&amp;qid=1511539431&amp;sr=8-2&amp;keywords=kotlin" target="_blank" rel="external">日语</a>、<a href="https://www.amazon.com/Kotlin%E5%AE%9E%E6%88%98-Svetlana-Isakova-Dmitry-Jemerov/dp/B07568C58F/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1511539582&amp;sr=1-3" target="_blank" rel="external">中文</a>、<a href="https://novatec.com.br/livros/kotlin-em-acao/" target="_blank" rel="external">葡萄牙语</a>)、在线课堂、教程和<a href="http://kotlinlang.org/community/" target="_blank" rel="external">其他资料</a>供初学者学习。</p>
<h2 id="与开发团队交流：网络研讨会和Reddit-AMA"><a href="#与开发团队交流：网络研讨会和Reddit-AMA" class="headerlink" title="与开发团队交流：网络研讨会和Reddit AMA"></a>与开发团队交流：网络研讨会和Reddit AMA</h2><p>为了分享更多新版本信息，我们计划于12月7日晚上6点举办<a href="http://kotlinlang.org/community/" target="_blank" rel="external">Kotlin1.2跨平台项目的网络研讨会</a>。名额有限，请及时注册！</p>
<p>Kotlin团队也会在12月5日在<a href="https://www.reddit.com/r/Kotlin/" target="_blank" rel="external">Kotlin Reddit</a>上进行AMA(问答会)，讨论将于中午开始，与你度过接下来的24小时。</p>
<h2 id="如何升级"><a href="#如何升级" class="headerlink" title="如何升级"></a>如何升级</h2><p>与往常一样，你可以在<a href="http://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a>中<strong>尝试新版本</strong>。</p>
<ul>
<li><strong>在Maven，Gradle和npm</strong>：请更新编译版本及标准库版本号到<code>1.2.0</code>，详细请查看<a href="http://kotlinlang.org/docs/reference/using-gradle.html" target="_blank" rel="external">文档</a>。</li>
<li><strong>在Intellij IDEA</strong>：2017.3已集成了1.2版本，旧版本可以通过安装或更新Kotlin插件来获取最新版本。</li>
<li><strong>在Android Studio</strong>：请通过<em>Plugin Manager</em>安装或更新你的插件。</li>
<li><strong>在Eclipse</strong>：通过<a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse" target="_blank" rel="external">Marketplace</a>安装插件。</li>
<li><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2.0" target="_blank" rel="external">Github发布页</a>可下载最新命令行编译器。</li>
</ul>
<p><strong>关于兼容性</strong>：Kotlin1.2版本及其标准库是<a href="http://kotlinlang.org/docs/reference/compatibility.html" target="_blank" rel="external">向前兼容</a>的，在1.0或1.1版本下成功编译并运行的代码也能运行在1.2上。考虑到一些大型团队需要逐渐推进更新，我们提供了一些编译器开关以便禁用部分新特性。如果遇到问题，请参考<a href="http://kotlinlang.org/docs/reference/compatibility.html#binary-compatibility-warnings" target="_blank" rel="external">这里</a>。</p>
<p><em>请尽情享受Kotlin！</em></p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(译)Kotlin 1.2 Beta is out]]></title>
      <url>/2018/01/13/(%E8%AF%91)Kotlin%201.2%20Beta%20is%20out/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a>&amp;<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/</a></p>
</blockquote>
<p>我们很高兴地发布Kotlin 1.2的Beta版本。借此发布，我们将揭示Kotlin 1.2的主要新特性——<strong>跨平台项目</strong>的实验性支持。此外，Kotlin native和标准库功能也<strong>开发完毕</strong> - 所有计划于Kotlin 1.2实现的新功能都已完备。现在正是你们<strong>反馈新改动</strong>的绝佳时期 - 因为我们仍然有时间对反馈加以考虑并调整1.2终版的设计。</p>
<p>在工具方面，Kotlin 1.2 Beta包含了与最近发布的<a href="https://github.com/enbandari/KotlinBlogTranslation/blob/master/translated/Kotlin%201.1.50%20is%20out.md" target="_blank" rel="external">1.1.50</a>更新相同的一系列特性。该测试版兼容从2016.3至2017.3的所有IntelliJ IDEA版本以及Android Studio 2.3与3.0。</p>
<p>从1.2-M2开始，所有的更新日志都可以在<a href="https://github.com/JetBrains/kotlin/blob/1.2-Beta/ChangeLog.md" target="_blank" rel="external">这里</a>找到。以下是重大改动：<img alt="12beta" class="alignnone size-full wp-image-5314" height="750" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/09/12beta.png" width="1500"></p>
<a id="more"></a>
<h1 id="跨平台项目"><a href="#跨平台项目" class="headerlink" title="跨平台项目"></a>跨平台项目</h1><p>跨平台项目是Kotlin 1.2的一个新的<strong>实验性</strong>功能，允许你在Kotlin支持的目标平台复用代码-JVM，JavaScript以及(未来会支持的)Native。在跨平台项目中，你提交的平台间的通用代码将放入通用模块，连同平台相关的部分一并放入依赖于平台的特定模块中。当您为一个特定的平台编译项目，公用部分和平台特定部分的代码都会生成出来。</p>
<p>跨平台项目所支持的一个关键特性是通过<strong>预期和实际的声明</strong>来表现通用代码与平台特定部分的依赖关系。预期声明定义API（类，接口，注释，顶层声明等）。实际声明则是该API在平台相依的实现，或是在外部库中引用现有实现的typealias：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Common code</span></div><div class="line">expect <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(world: <span class="type">String</span>)</span></span></div><div class="line"> </div><div class="line">expect <span class="class"><span class="keyword">class</span> <span class="title">URL</span></span>(spec: String) &#123;</div><div class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getHost</span><span class="params">()</span></span>: String</div><div class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPath</span><span class="params">()</span></span>: String</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// JVM code</span></div><div class="line">actual <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">(world: <span class="type">String</span>)</span></span> &#123;</div><div class="line">  println(<span class="string">"Hello JVM <span class="variable">$world</span>"</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">actual typealias URL = java.net.URL</div></pre></td></tr></table></figure>
<p>若想得到更多跨平台项目的信息，请查看此<a href="http://kotlinlang.org/docs/reference/multiplatform.html" target="_blank" rel="external">文档</a>。</p>
<p>如果你在发布之前就已经尝试了该功能，也请注意及时更新您的项目：<code>header</code>和<code>impl</code>关键字已重命名为<code>expect</code>和<code>actual</code>。若想代码自动更新，请使用IntelliJ IDEA中的Analyze | Cleanup Code。</p>
<h1 id="语言和编译器"><a href="#语言和编译器" class="headerlink" title="语言和编译器"></a>语言和编译器</h1><h2 id="注释中的数组字面值"><a href="#注释中的数组字面值" class="headerlink" title="注释中的数组字面值"></a>注释中的数组字面值</h2><p>Kotlin 1.2有一个新的语言特性：对<strong>注释中文字常量数组</strong>的支持。现在，不需要类似<code>@CacheConfig(cacheNames = arrayOf(&quot;books&quot;, &quot;default&quot;))</code>这样的写法了，你只需要这样简单地表示：</p>
<p><code>@CacheConfig(cacheNames = [&quot;books&quot;, &quot;default&quot;])</code></p>
<p>其实早在Kotlin 1.2之前的里程碑版本中你已经可以这样做了。但在1.2 Beta中，我们更加统一了语法并允许使用常量数组和<code>可变</code>参数：</p>
<p><code>@RequestMapping(value = [&quot;value1&quot;, &quot;value2&quot;], path = [&quot;path1&quot;, &quot;path2&quot;])</code></p>
<p>为了实现这种改动，我们决定对常规方法调用和注释中，使用命名参数和可变参数的语法做一些调整。你可能会感到惊讶，因为在Kotlin 1.1中，当使用命名参数语法调用<code>可变参数</code>方法时，可以传递单个参数作为一个立即值：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(<span class="keyword">vararg</span> strs: <span class="type">String</span>)</span></span> &#123; ... &#125;</div><div class="line"> </div><div class="line">foo(strs = <span class="string">"abc"</span>)</div></pre></td></tr></table></figure>
<p>这样将<code>&quot;abc&quot;</code>赋值于<code>strs</code>是不太恰当的，这导致我们在将整个数组作为命名参数传递时得使用展开运算符：</p>
<p><code>foo(strs = *arr)</code></p>
<p>我们很想可以写成<code>foo(strs = arr)</code>，但考虑到兼容性，它需要一个逐步迁移的过程，所以在1.2版本里面，我们弃用了<code>foo(strs = &quot;abc&quot;)</code>这样的写法。取而代之的是（这种用法应该很少见到），你可以使用展开和<code>arrayOf</code>方法：</p>
<p><code>foo(x = *arrayOf(&quot;abc&quot;))</code></p>
<p>我们计划实现一个<a href="https://youtrack.jetbrains.com/issue/KT-20462" target="_blank" rel="external">编译器优化方案</a>来消除在这样的调用下对于数组的分配与复制。</p>
<p>由于注释是一个更受限制的上下文，所以我们可以跳过一步迁移，那样你就可以简单地把值放入一个字面值数组，而不需要扩展运算符：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>(<span class="keyword">vararg</span> value: String)</div><div class="line"> </div><div class="line"><span class="meta">@Foo(value = <span class="meta-string">"a"</span>)</span> <span class="comment">// deprecated</span></div><div class="line"><span class="meta">@Foo(value = [<span class="meta-string">"a"</span>])</span> <span class="comment">// correct</span></div></pre></td></tr></table></figure>
<p>在<a href="https://youtrack.jetbrains.com/issue/KT-20171" target="_blank" rel="external">You Track issue</a>可以看到更多相关信息。</p>
<h2 id="lateinit改进"><a href="#lateinit改进" class="headerlink" title="lateinit改进"></a>lateinit改进</h2><p>我们添加了一个新的反射API，这允许您检查一个<code>lateinit</code>变量是否已被初始化：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> file: File</div><div class="line"> </div><div class="line"><span class="comment">// ...</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> (::file.isInitialized) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是<a href="https://github.com/Kotlin/KEEP/pull/73/files" target="_blank" rel="external">该KEEP提议</a>的一部分实现，剩下的部分（<code>析构</code>的方法）则暂时推迟到1.3。</p>
<p>此外，<code>lateinit</code>修饰符现在可以用在<a href="https://youtrack.jetbrains.com/issue/KT-15461" target="_blank" rel="external">全局属性</a>和<a href="https://youtrack.jetbrains.com/issue/KT-14138" target="_blank" rel="external">局部变量</a>上了。举个例子，当你初始化一个对象图，在图中对象的属性之间有一个循环依赖关系的时候（比如，当lambda作为一个构造函数的参数让一个对象引用另一个对象的时候，必须在传递之后才定义），局部变量便可以使用了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">lateinit</span> <span class="keyword">var</span> x: Component</div><div class="line"> </div><div class="line">  <span class="comment">// inject takes a lambda which must return the Component though</span></div><div class="line">  <span class="keyword">val</span> injector = inject(</div><div class="line">    ...,</div><div class="line">    componentProvider = &#123; x &#125;,</div><div class="line">    ...</div><div class="line">  )</div><div class="line"> </div><div class="line">  <span class="comment">// Initialization is only possible via injector, once it has been run</span></div><div class="line">  x = injector.createComponent()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多详细信息，请查看<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/local-and-top-level-lateinit-vars.md" target="_blank" rel="external">KEEP</a>。</p>
<h2 id="绑定方法引用的改进"><a href="#绑定方法引用的改进" class="headerlink" title="绑定方法引用的改进"></a>绑定方法引用的改进</h2><p>现在，你可以把类似<code>this::foo</code>这样的引用方法中的<code>this</code> 省略掉，直接写成<code>::foo</code>。在之前只有全局引用的时候才能省略。更多信息，请查看<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-15667" target="_blank" rel="external">YouTrack issue</a>。</p>
<h2 id="类型推断的改进"><a href="#类型推断的改进" class="headerlink" title="类型推断的改进"></a>类型推断的改进</h2><p>Kotlin编译器现在可以使用类型推断中的类型转换信息。当调用了一个返回<code>T</code>且转换为特定类型<code>Foo</code>的泛型方法，编译器现在可以知道这个泛型绑定的是<code>Foo</code>类型。这对于Android开发人员十分重要，因为编译器在Android API26中可以正确分析<code>findViewById</code>了：</p>
<p><code>val button = findViewById（R.id.button）as Button</code></p>
<p>由于该方法已被改为<code>&lt;T extends View&gt; T findViewById(int id)</code>，因此Kotlin 1.1已不支持在这种调用中推断<code>T</code>类型参数。更多信息，请查看<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-13644" target="_blank" rel="external">YouTrack issue</a>。</p>
<h2 id="警告视为错误"><a href="#警告视为错误" class="headerlink" title="警告视为错误"></a>警告视为错误</h2><p>现在编译器提供了一个将所有警告视为错误的选项。在命令行或下面的Gradle代码片段中使用<code>-Werror</code>：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compileKotlin &#123;</div><div class="line">  kotlinOptions.warningsAsErrors = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Smart-cast的改进"><a href="#Smart-cast的改进" class="headerlink" title="Smart cast的改进"></a>Smart cast的改进</h2><p>Smart cast现在能用在<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-4565" target="_blank" rel="external">subjects of safe casts</a>了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(x: <span class="type">Foo</span>?)</span></span> &#123;</div><div class="line">  <span class="keyword">val</span> b = (x <span class="keyword">as</span>? SubClass)?.subclassMethod1()</div><div class="line">  <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</div><div class="line">    x.subclassMethod2() <span class="comment">// x is smart cast to SubClass</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，以前只允许在lambda之前修改的的<code>var</code>变量<a href="https://youtrack.jetbrains.com/issue/KT-14486" target="_blank" rel="external">现在能</a>在其中执行Smart cast了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x: String? = <span class="literal">null</span></div><div class="line"><span class="keyword">if</span> (flag) x = <span class="string">"Yahoo!"</span></div><div class="line"> </div><div class="line">run &#123;</div><div class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span>) &#123;</div><div class="line">    println(x.length) <span class="comment">// x is smart cast to String</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="枚举中的嵌套类"><a href="#枚举中的嵌套类" class="headerlink" title="枚举中的嵌套类"></a>枚举中的嵌套类</h2><p>枚举内的嵌套类现在已经被<a href="https://youtrack.jetbrains.com/issue/KT-16310" target="_blank" rel="external">弃用</a>；解决方案为将class标记为inner。</p>
<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="分包的兼容性"><a href="#分包的兼容性" class="headerlink" title="分包的兼容性"></a>分包的兼容性</h2><p>Kotlin标准库现在完全兼容Java 9的模块系统，Java 9禁止分包（多个jar文件在同一个包中声明类）。为了支持分包，我们创建了新的<code>kotlin-stdlib-jdk7</code>和<code>kotlin-stdlib-jdk8</code>，取代了旧的<code>kotlin-stdlib-jre7</code>和<code>kotlin-stdlib-jre8</code>。其中的声明在kotlin的同名包下是可见的，但是由于我们对编译器添加了黑魔法，这在Java的不同名包下也是可见的。因此，这种切换不需要对源代码进行任何更改。</p>
<p>为确保与新模块系统的兼容性，我们做出的另一个改动是从<code>kotlin-reflect</code>库中移除<code>kotlin.reflect</code>包中已经弃用的声明。这些声明需要在<code>kotlin.reflect.full</code>包中使用，这在Kotlin 1.1中就已经支持了。</p>
<h2 id="kotlin-math"><a href="#kotlin-math" class="headerlink" title="kotlin.math"></a>kotlin.math</h2><p><code>kotlin.math</code>是Kotlin 1.2标准库中的一个新包，允许您在跨平台代码中执行数学运算。在1.2-Beta中，我们对它进行了一些改进：</p>
<ul>
<li>现在支持反双曲函数（asinh，acosh，atanh）</li>
<li>在<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">1.2-M2</a>中添加的浮点数二进制表示（toBits，nextUp等）相关的函数现在可用于JavaScript</li>
<li>对JavaScript中polyfills精确度的改进</li>
</ul>
<h1 id="发布前的注意事项"><a href="#发布前的注意事项" class="headerlink" title="发布前的注意事项"></a>发布前的注意事项</h1><p><em>与其他里程碑版本一样，我们对新语言和库的相关功能<strong>不保证向后兼容性</strong>。在1.2的里程碑版本中引入的任何内容在1.2终版之前<strong>可能会发生变化</strong>。一旦RC版确定，在此之前版本的编译文件将被编译器清理，你需要重新编译1.2-Mx或1.2-Beta所编译过的文件。</em></p>
<p><em>但是，这不会影响由1.1.x和之前release版本编译的代码。</em></p>
<h1 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h1><p><strong>通过Maven / Gradle</strong>：在构建脚本和项目仓库中添加<code>http://dl.bintray.com/kotlin/kotlin-eap-1.2</code>；使用<code>1.2.0-beta-31</code>作为编译器插件和标准库的版本号。</p>
<p><strong>通过IntelliJ IDEA</strong>：<em>工具→Kotlin→配置Kotlin插件更新</em>，在更新下拉列表中选择“Early Access Preview 1.2”，然后点击<em>检查更新</em>。命令行编译器可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2-beta" target="_blank" rel="external">GitHub release page</a>下载。</p>
<p><strong>通过<a href="https://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a></strong>：使用右下角的下拉列表将编译器版本更改为1.2（即将实现）。</p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【商业】小南瓜鸡蛋杯宣传视频]]></title>
      <url>/2018/01/13/%E3%80%90%E5%95%86%E4%B8%9A%E3%80%91%E5%B0%8F%E5%8D%97%E7%93%9C%E9%B8%A1%E8%9B%8B%E6%9D%AF%E5%AE%A3%E4%BC%A0%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<p><video width="100%" controls><source src="https://cloud.video.taobao.com/play/u/4021205845/p/2/e/6/t/1/50195620377.mp4" type="video/mp4"></video><br>STAFF：<br>拍摄 甘希明&amp;美逗摄影<br>脚本 黄志强<br>剪辑 黄志强<br>后期 黄志强</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 视频 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[(译)Kotlin 1.2 M2 is out]]></title>
      <url>/2017/09/10/(%E8%AF%91)Kotlin%201.2%20M2%20is%20out/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a>&amp;<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/</a></p>
</blockquote>
<p>我们很高兴地公布Kotlin 1.2的第二个里程碑版本。该版本的重点在于Kotlin编译器和工具的稳定性与bug修复，以及Kotlin标准库的改进。此外还包含了很多即将发布的Kotlin 1.1.4所具备的工具特性。</p>
<p>如果能有您对新特性或者运行中所遇到的任何问题的反馈，我们将非常感谢。</p>
<p>从1.2 M1开始，完整的更新日志可以在<a href="https://github.com/JetBrains/kotlin/blob/1.2-M2/ChangeLog.md" target="_blank" rel="external">这里</a>查看，重要的变更在下面列出：</p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><h3 id="重大更改：Java默认方法调用"><a href="#重大更改：Java默认方法调用" class="headerlink" title="重大更改：Java默认方法调用"></a>重大更改：Java默认方法调用</h3><p>到目前为止，Kotlin的接口成员在jvm 1.6重写Java默认方法的时候，如果通过super调用父类方法，将会得到一个警告<code>子类对Java默认方法的调用在JVM target 1.6已被弃用。请使用-jvm-target 1.8重新编译</code>。在1.2-M2版本中，我们将警告变更为错误，因此此类代码将需要使用<code>-jvm-target 1.8</code>编译。</p>
<a id="more"></a>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="修正windowed-pairwise操作"><a href="#修正windowed-pairwise操作" class="headerlink" title="修正windowed/pairwise操作"></a>修正windowed/pairwise操作</h3><p>我们听取了大家<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/window-sliding.md" target="_blank" rel="external">KEEP-11</a>中关于chunked/windowed/pairwise函数的反馈，并且在1.2-M1里程碑版中发布了预览功能，在这基础上，我们还进行了如下改动：</p>
<ul>
<li><p><code>windowed</code>函数的自增变量现在默认为1。<br>同时还增加了一个额外的可选参数<code>partialWindows</code>，用于控制不完整的窗口的结束处理流程。默认值为false，表示不完整的窗口不会保留。</p>
</li>
<li><p><code>pairwise</code>函数名让人摸不着头脑，不知道它是如何配对元素的。所以我们新命名为<code>zipWithNext</code>，这更清楚地表明这函数会把集合中每个元素和下一个元素都压缩一次。</p>
</li>
</ul>
<h3 id="标准库中的通用数学运算"><a href="#标准库中的通用数学运算" class="headerlink" title="标准库中的通用数学运算"></a>标准库中的通用数学运算</h3><p>长期以来人们一直希望标准库<a href="https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-4900" target="_blank" rel="external">KT-4900</a>能够支持数学运算。但目前我们只能借助JVM平台上的<code>java.lang.Math</code>数学函数与常量，和JS平台上会把原生JS数学函数暴露给Kotlin的<code>kotlin.js.Math</code>。</p>
<p>但现在我们在<code>kotlin.math</code>包中引入了下述几组API：</p>
<ul>
<li>常数：<code>PI</code>和<code>E</code>；</li>
<li>三角函数：<code>cos</code>，<code>sin</code>，<code>tan</code>和反三角函数<code>acos</code>，<code>asin</code>，<code>atan</code>，<code>atan2</code>；</li>
<li>双曲函数：<code>cosh</code>，<code>sinh</code>，<code>tanh</code>；</li>
<li>幂函数：<code>pow</code>（扩展函数），<code>sqrt</code>，<code>hypot</code>，<code>exp</code>，<code>expm1</code>；</li>
<li>对数函数：<code>log</code>，<code>log2</code>，<code>log10</code>，<code>ln</code>，<code>ln1p</code>；</li>
<li>取整函数：<ul>
<li><code>ceil</code>，<code>floor</code>，<code>truncate</code>，<code>round</code>（奇进偶取）函数；</li>
<li><code>roundToInt</code>，<code>roundToLong</code>（半整数）扩展函数；</li>
</ul>
</li>
<li>符号和绝对值：<ul>
<li><code>abs</code> 和 <code>sign</code> 函数；</li>
<li><code>absoluteValue</code>和<code>sign</code>扩展属性；</li>
<li><code>withSign</code>扩展函数；</li>
</ul>
</li>
<li>比较两个值的<code>max</code>和<code>min</code>函数；</li>
<li>二进制表示法：<ul>
<li><code>ulp</code>扩展属性；</li>
<li><code>nextUp</code>，<code>nextDown</code>，<code>nextTowards</code>扩展函数；</li>
<li><code>toBits</code>，<code>toRawBits</code>，<code>Double.fromBits</code>（都在<code>kotlin</code>包中）。</li>
</ul>
</li>
</ul>
<p><code>Float</code>参数也可用相同的函数集（常数除外）。</p>
<p>上述函数大部分（二进制表示法除外）在JS也可以使用，因此两个平台可以通用一套计算代码。</p>
<h2 id="预发行说明"><a href="#预发行说明" class="headerlink" title="预发行说明"></a>预发行说明</h2><blockquote>
<p>与其他里程碑版本一样，对于新的语言和标准库特性，<strong>我们不会提供向后兼容的保证</strong>。1.2最终版之前，新引入的内容都<strong>尙处于更改之中</strong>。当我们最终RC时，预发行版本的所有二进制文件将被编译器认为不合法：您需要重新编译之前1.2-Mx编译的所有内容。    </p>
<p>但是，使用1.1.x或更早的版本编译的代码则不需要重新编译也可以完美运行。</p>
</blockquote>
<h2 id="体验新版"><a href="#体验新版" class="headerlink" title="体验新版"></a>体验新版</h2><p><strong>在Maven / Gradle</strong>：添加<code>http://dl.bintray.com/kotlin/kotlin-eap-1.2</code>作为构建脚本和项目的库；然后把编译插件和标准库的版本号修改为<code>1.2-M2</code>。</p>
<p><strong>在IntelliJ IDEA</strong>：打开<em>Tools → Kotlin → Configure Kotlin Plugin Updates</em>，接着在<em>Update channel</em>下拉列表中选择”Early Access Preview 1.2”，然后点击<em>Check for updates</em>。</p>
<p>命令行编译器可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2-M2" target="_blank" rel="external">Github发布页面</a>下载。</p>
<p><strong>在<a href="https://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a></strong>：在右下角的下拉列表将编译器版本更改为1.2-M2（即将开放）。</p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(译)KotlinConf – Speaker List Announced]]></title>
      <url>/2017/07/24/(%E8%AF%91)KotlinConf%20-%20Speaker%20List%20Announced/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a>&amp;<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/</a></p>
</blockquote>
<p>仍未到11月吗？</p>
<p>距离KotlinConf 2017只剩100多天了，我们在此非常激动地宣布我们邀请了<a href="https://kotlinconf.com/speakers/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">48位十分出色的讲师</a>发表演说！能有这样优秀的嘉宾与公司团队代表Kotlin社区，我感到非常兴奋。</p>

<p><a href="https://kotlinconf.com/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external"><img alt="KotlinConf" class="aligncenter size-full wp-image-5123" height="354" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/07/kc.png" width="940"></a></p>


<p><span id="more-5121"></span></p>

<a id="more"></a>
<p>一般抢先票在首轮抢先注册活动之后也已经售罄了，普通门票尚在发售中，售完即止。如果你想参加KotlinConf，也请<a href="https://kotlinconf.com/registration/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">马上注册</a>吧，否则你将错失机会。</p>
<p>温馨提示，KotlinConf将于11月2-3日在美丽的加利福尼亚州旧金山27码头举行。届时JetBrains团队和充满激情的社区讲师将分享他们关于Kotlin的知识，经验和理念。</p>
<p>为期两天的学习，交流会与更多的乐趣在等待着你。<a href="https://kotlinconf.com/registration/?utm_source=kotlinblog&amp;utm_medium=blog&amp;utm_campaign=speakerannouncement" target="_blank" rel="external">立刻注册吧</a>！</p>
<p>我们期待着在今秋的旧金山与你相见！</p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(译)Kotlin Future Features Survey Results]]></title>
      <url>/2017/07/23/(%E8%AF%91)Kotlin%20Future%20Features%20Survey%20Results/</url>
      <content type="html"><![CDATA[<blockquote>
<p>译者：<a href="https://suima0v0.github.io" target="_blank" rel="external">黄志强</a>&amp;<a href="https://pye52.github.io/" target="_blank" rel="external">团子吃蛋挞</a><br>源地址：<a href="https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/" target="_blank" rel="external">https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/</a></p>
</blockquote>
<p>最近令人激动的事情层出不穷，我们不得不怀着抱歉的心情推迟公布Future Features Survey的结果。但迟到总比不到要好，本博客总结了我们在调查中获知的内容。</p>
<p>总的来说，<a href="https://blog.jetbrains.com/kotlin/2017/04/kotlin-1-1-event-report/" target="_blank" rel="external">Future Features Survey</a>从四月份开始，一共收到约850份答复。在此我们要感谢所有参与者！</p>
<h1 id="调查结果"><a href="#调查结果" class="headerlink" title="调查结果"></a>调查结果</h1><p>原始的统计数据（匿名）可在<a href="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/edit" target="_blank" rel="external">这里</a>获得。</p>
<p>我们的议题有二：</p>
<ul>
<li><p>提名三个最受你期待的特性</p>
</li>
<li><p>提出一项你认为不需要的特性（可选）</p>
<a id="more"></a>
</li>
</ul>
<p>你可以在<a href="https://drive.google.com/file/d/0BwAovUlww0CmVmNQTXd4TTdKYUU/view" target="_blank" rel="external">这里</a>查看提名features的名单。</p>
<p>我们总共收到852份答复（某些是白卷），其中大多数人都用完了3个实用特性的提名名额，而约有300多人放弃了对不受欢迎特性的提名。</p>
<p>这是汇总的结果（按受欢迎程度排名）：</p>

<p><iframe frameborder="0" height="637" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/pubchart?oid=2077021838&amp;format=interactive" width="790"></iframe></p>


<p><span id="more-5025"></span></p>

<p>由上图可知，最受欢迎特性的依次为：“Collection literals”, “SAM conversions for Kotlin interfaces”与“Truly immutable data”</p>
<p>而“Private members accessible from tests”似乎最具争议，108票赞同与120票反对。这可以理解，毕竟可测试性设计是被广泛认可的惯例。</p>
<p>但我对“Overloadable operators | and &amp;”的提名结果感到些许困惑，有46票赞成与50票反对，而我看不出这个特性所带来的任何坏处，请在文章评论区分享你这样选择的原因。</p>
<p>这是最不受欢迎特性的排名：</p>

<p><iframe frameborder="0" height="483.5" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1eyhyrJPsNWrM6dYqchQzjNs41AQKjz9Xb_WB-zdy8To/pubchart?oid=346107453&amp;format=interactive" width="933"></iframe></p>

<p>需要说明的是，“Optional commas”和“Optional trailing commas”本应是两个选项，我们错误地把他们放在了同一个feature中，所以引起了难以解读的结果。</p>
<p>另外我们还忘了在调查中添加“Ternary conditional operator”，在我意识到的时候已经太晚了，很抱歉各位。我们已经明白这个功能会有很大需求，会持续进行研究的。</p>
<p>但最奇怪的是，这次调查的结果与在Kotlin 1.1发布会中进行的调查截然不同：</p>

<p><iframe frameborder="0" height="580" scrolling="no" seamless src="https://docs.google.com/spreadsheets/d/1gR1C69Rcmv2szbQJ-mXrhW7KtU4tPSya93Xq9sfE8Y0/pubchart?oid=2043595044&amp;format=interactive" width="1034"></iframe></p>

<p>我怀疑是人们看了上次投票后产生了某些偏见，但这很难确定，也可能是另外的因素，例如线下与线上的参与者本身就具有很大的差异性。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>已明确方向的三个特性是：</p>
<ul>
<li>Collection literals</li>
<li>SAM conversions for Kotlin interfaces</li>
<li>Truly immutable data</li>
</ul>
<p>相比之下其余的features只收到了较少的投票。Truly immutable data饱受期待，但真的很难实现，这里我们没法给予承诺。而另外两项在不久的将来都可以实现，multi-catch看起来也不错。总而言之，我们将在工作计划中重视这次调查的结果。</p>
<p>免责声明：如上所述，我们并没有承诺在特定的时间内完成任何这些功能。我们很关心用户需要什么，但不能预先承诺任何东西。因为在知道这些功能是否确切（并且优雅地）适合这种语言之前，我们都需要进行慎重的设计工作。</p>
]]></content>
      
        <categories>
            
            <category> kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[夏の音：ギタとひぐらしと少女のうた]]></title>
      <url>/2017/07/16/%E5%A4%8F%E3%81%AE%E9%9F%B3%EF%BC%9A%E3%82%AE%E3%82%BF%E3%81%A8%E3%81%B2%E3%81%90%E3%82%89%E3%81%97%E3%81%A8%E5%B0%91%E5%A5%B3%E3%81%AE%E3%81%86%E3%81%9F/</url>
      <content type="html"><![CDATA[<p>朝、ひぐらしの鳴き声と共に起きる</p>
<p>夜、ひぐらしの鳴き声と共に眠る</p>
<p>夏が、いつの間に、来たろ。部屋外の木や、草や、いつの間に、そんなに青いになったろ。熱が、山のように重い、ぼくを迫ている。けど、空の色、木色、どこにもある蜩の音、まさに、世界が子供のような、「私は生きている！」と僕を叫びている。生き生きとするな、世界は。</p>
<a id="more"></a>
<p>夏と言うと、もちろん今は少女音とギタの季節だ！JPOPや、ロックや、幻想を満たす色々な唄が何の拘束もない、自然で自由な生活を僕の頭に届ける。僕のプログラム中のコードも、綺麗になった。「コードは芸術だ。」突然、そう思いをする。</p>
<blockquote>
<p>「君が好きだから</p>
<p>君の大好きな夏を好きになった</p>
<p>焼けるような日差しに腰を下ろして</p>
<p>溶けて流れた虹に笑った」</p>
</blockquote>
<p>こんの生活が欲しいな、海風に乗って夏の恋の甘さを。</p>
]]></content>
      
        <categories>
            
            <category> 日本語 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ゼロから日本語を勉強しましょう！]]></title>
      <url>/2017/07/15/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%EF%BC%81/</url>
      <content type="html"><![CDATA[<p>七月十四日/晴れ</p>
<p>これはおれの気まぐれかもしれない。まあ、とりあえず、おれの日本語学習プログラムは復活だ！めでたしめでたし。</p>
<p>教材は「みんなの日本語」を選べます。「新标日」と「新编日语」両方も勉強してみました、前者の文法が変、後者の文法はただしがつまらないです（さすが大学の教材）。それで、「みんなの日本語」を試しましょう。</p>
<a id="more"></a>
<p>日本語の日記もよく書くしよ、難易度高いけど、頑張ってみよう！</p>
]]></content>
      
        <categories>
            
            <category> 日本語 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狂赋]]></title>
      <url>/2017/07/15/%E7%8B%82%E8%B5%8B/</url>
      <content type="html"><![CDATA[<p>　　狂者，气也。</p>
<p>　　腹满书而生气，气饱腹而自溢。溢者，狂也。大凡狂者，皆负才情。小才者狂，芥而锐目，倾国色之牡丹，决桎梏之洪流，落逸禽之飞矢，幻灯红之迷昙；大才者狂，瀚而磅礴，抟扶摇之棕榈，纳百川之沉渊，覆天地之浮云，忘光阴之大椿。小狂狂而毕露，鹗之眸，豹之尾；大狂狂而尽敛，鹏之羽，龟之甲。是故小才者，“狂”之左，兽之利器；大才者，“狂”之右，王之霸气。</p>
<p>　　夫人之气宇，修于内而发于外，生于书而广于己。汲百家之精髓，融一身之秀气，生于混沌，化于雏形，表于世间。忽察人之修行，莫如己高；世之涵养，莫如己深，便滋狂傲之气，视弱者为蝼蚁，以自身为独秀，著狂论以傲世，搁礼仪于不顾，其小狂已成形。既而似韦编三绝，汗牛充栋，又品察人间情愫，世态百味，便始参天道，自成一体，饱藏宇宙天机，吐纳山川灵气，洞察时间轮回，包容天地万物，融有形于无形，化小狂为大狂。由是利气既褪，霸气已成。</p>
<a id="more"></a>
<p>　　故凡学者必有气，气者必有狂，气生于悟道，狂生于赛道。广义而论，道有生于市者，有生于武者，有生于书者。故亦有商之气，将之气，儒之气。朱门肉臭谓之小狂，玉堂金马谓之大狂；荐守街亭谓之小狂，喝断长坂谓之大狂；笑说鸡肋谓之小狂，客居五柳谓之大狂。大狂者，必立其巅峰，俯仰天地，如君临天下，唯我独尊，又于其处世腹有海量，不为诽言所怒，不为危情所动。以凡人之躯，拥圣贤之灵，此之谓“半仙”。</p>
<p>　　夫狂者至尊至傲。察俗夫之偶运兮，嗤之以鼻；逢屈身之金帛兮，不动如山；遭喧尘之不解兮，隐耕桃林，非退也，不屑耳。然是人不屑者众，狂者寡，此余之大恨哉。</p>
<p>　　二〇一一年八月二十日于顺德</p>
<p>　　无瘾诗人</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 骈文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[少年守志说]]></title>
      <url>/2017/07/12/%E5%B0%91%E5%B9%B4%E5%AE%88%E5%BF%97%E8%AF%B4/</url>
      <content type="html"><![CDATA[<p>　　守志如填海，未见其满而日有所满；辍志如易途，日有所行而未见其远。然时之少年，辍志者众，守志者寡。人是如此，国何以堪！逢五四之佳节，得总理之劝语，概时下之短志，寄文章以励子。</p>
<p>　　少年守志，曦升碧瑶之霄；中年守志，日受骄云之蔽；老年守志，夕落东去之江。夫少年者，其心也万壑，其力也金刚，其智也灵狐，其气也长江。少不守志，更待何时？</p>
<p>　　然，心怀万壑则易好高骛远；力赛金刚则易不分放矢；智比灵狐则易恃才傲物；气若长江则易不拘礼节。是故少年常立志者众，立长志者寡。少年守志者，心虽高而专一，力虽沛而有度，智虽明而谦逊，气虽浩而收敛。</p>
<a id="more"></a>
<p>　　年少则利于耐守志之艰难，守志则利于改年少之浮夸。年少守志，不亦齐美乎？</p>
<p>　　然守志非易事。</p>
<p>　　伴山脚仰其入云而未见其顶！能不骇而却步？攀山腰水囊已空而未见溪泉，能不疲而止步？爬山颈寂寥已久而未见人影，能不忧而停步？守志难，难于上青天。伟长十八学理，八十寒暑挑灯苦读；自清十二成文，二十春秋独自笔耕。嵇康恨而绝交，文举固而拒曹，鹏举愤而雪耻，渊明适而归田。孔丘贫教，史迁辱书。洛神之绣虎，彦和之雕龙；晋士特奇，可比一斑之豹；唐儒博识，堪比五总之龟。</p>
<p>　　其山虽高，登其峰者未见其少；人虽非少，登峰之径未见其顺。此等人也，年少而起，耄耋而不惜。仰其峰高，骇而不弃！耐其水枯，累而不弃！苦其寂寞，忧而不弃！守志非易事，其长，苦，寂，无边，无路，无止，唯守一字，方能克之。</p>
<p>　　少年守志则国生根，愈根深而蒂固；少年辍志则国弃羽，欲高飞而无力。昔李斯《谏逐客书》道河海不择细流，故能就其深；今启超《少年说》道少年强则国强，少年富则国富。昔国之初长，只因昔之少年守志；而国之复兴，还需今之吾辈守志。吾之最高志乃国之志，吾守志后方能成国志。成国志者，非主席，非总理，少年也。</p>
<p>　　少年者，当以披荆斩棘无所惧怕之勇，隳山碎岩所向披靡之力，熊咆虎啸龙吟凤鸣之势，甘受疾苦永不言弃之心，守乘风破浪驰骋天下之志，守修身齐家淡泊名利之志，守治国安国富国强国之志！<br>　　<br>　　二〇一一年于顺德一中</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 骈文 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
