<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于中西方文明发展逻辑的简明梳理]]></title>
    <url>%2F2019%2F10%2F19%2F%E5%85%B3%E4%BA%8E%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E6%98%8E%E5%8F%91%E5%B1%95%E9%80%BB%E8%BE%91%E7%9A%84%E7%AE%80%E6%98%8E%E6%A2%B3%E7%90%86%2F</url>
    <content type="text"><![CDATA[本文主要观点来源于金灿荣老师于港大的《风云变幻下的中美关系与世界格局》讲座、于观天下讲坛的《未来10年的世界大变局》讲座，以及温铁军老师于人大的《东西方文明的不同和对西方灌输给东方的观念的反思》讲座整理，并在论据部分作补充。（针对文章第二部分所述的中世纪人文情况，可通过动画「狼与香辛料」、「海盗战记」以及游戏「巫师三」等较为形象地了解） ###古代中国文明的产生及发展 中国的农业发展起源于四川盆地水稻种植，四川盆地地势平坦，是热带季风气候，受到太平洋与印度洋夏季风的水汽滋润，形成丰富降水，天然适宜水稻生长。 但由于四川盆地地势较低，大江大河多流经此地，加上夏季青藏高原冰雪融化与降水频繁，所以此地必然是洪涝灾害严重地区。这也导致了，中国的农耕文明，必然起源于水利灌溉模式下的村社文明。大禹治水便有所揭示，谁最懂治水，谁便是该文明下的最高领导人。以疏代堵也作为中国哲学影响至今。 因此村社模式中的几大生产特征，奠定了中华民族与西方世界不同的价值观与主要行为基础： 家庭是基本的生产单位，而温饱问题需要大量人力耕作，所以农耕时代家庭对生孩子的数量有着严格的KPI考核指标，所以有“不孝有三无后为大”。 土地是基本的生产资料，所以中国是不认神的，只认土地，只为土地打架。抢了土地生了孩子之后就要在家耕地，所以就有“父母在，不远游”的孝道文化。所以中国的刑罚就是流放三千里，让你死后不能跟父母一起，永远是孤魂野鬼，对中国人来说很凄惨，宁愿割头也不去。 中国家庭儿子女儿多，必然会产生矛盾，所以中国传统的财产继承制必然是所有孩子平分家产，所以必然会产生“君君臣臣父父子子”的伦理约束。 农业耕作收到气候影响，时效性强。所以必然要求在有限时间内，集中人力共同劳作，中国自古强调集体意识，加之中国地大物博，这也是战国的杨朱学派与五四运动所代表个人主义思潮无法完成统一中国思想的历史使命的原因。 ###古代西方国家海洋文明的产生及发展 西方文明诞生于古希腊，其特殊的地理环境是塑造欧洲文化的重要原因。 欧洲平原破碎，土地贫瘠，不能生产小麦稻米等，所以粮食短缺；而因阳光充足，能种植高附加值的橄榄油，葡萄等；他们只能通过海路卖到亚细亚与北非交换粮食。地理形态决定商业形态，商业形态决定文化形态，这也决定了西方文明的本质是交易文化。贸易的发展还必然会带来法制的发展，因为双方不认识，贸易需要双方达成契约以保护贸易的有效性。同时，由于航海的物质条形难以估算，物理不确定性多，所以不许信一个神，在精神上保持确定性，古希腊出海前就要祭祀一下神（波塞冬）。另外，西方古代以采集狩猎为主，采集与狩猎需要强壮的身体，所以西方个人主义盛行，崇尚英雄主义。 因为商业交换强调大本金，本金充足才能增加利润，所以家庭财富不可分割，西方只能是长子继承制，土地有限，二子三子只能去海外殖民。在公元1453年，土耳其的奥斯曼帝国崛起，更是阻断了南北两条丝绸之路以及红海到地中海的贸易运输，这对中国无所谓，但对西方就阻断了经济来源。由于贸易，西方只能向西向南开辟海上贸易路线，开启大航海时代。 大航海时代的地理大发现，也是西方文明对东方领先的开始。犹豫东欧被奥斯曼帝国垄断，所以西方只能往西往南远航，哥伦布发现新大陆（美洲大陆），麦哲伦绕地球一周，发现地球是圆的，地理知识以及大航海所需要的几何学，科学等瞬间超越东方国家，并迅速拉开知识差距。随后不久，西方人迅速占领北美、南美、大洋洲与非洲，在自然资源上也瞬间超过东方国家，并完成了资本主义的原始积累。 近代殖民→大机器制造→工业革命→民主的诞生为什么西方世界能比东方农业社会更快速积累现代化所需的财富，原因有几点： 海洋文明的战争的结果是赢家通吃（Winner takes all.）。不同于东方国家打仗为了占有土地，输了也可以退守千里，割让领土；海洋舰队没有土地，输了的一方船只被摧毁，财富被掠夺，财富会迅速聚集到强者手中。而负面结果就是导致贫富差距。 神学影响所带来的的奴隶制提供了大量优廉劳动力。西方讲究个人主义，但人仅限于同宗教信仰者，异教徒不配为人，所以奴隶制的传统一直为西方提供了免费的终身劳动力。如爱尔兰，土地优渥，人民以农业为主，战斗力一直较差，就多次被维京人、英国人等疯狂蹂躏。 大航海时代殖民统治了世界绝大部分自然资源。比如英国，在全球七大洲都有它的殖民地，在英国的统治范围里不论何时都有领土处于白昼中，被称为“日不落帝国”。非洲，南美等世界各地的自然资源与奴隶被疯狂掠夺，组成了资本主义的原始积累。 所以西方的工业革命是需求驱动的。大航海后西方世界控制的地盘是之前的11倍，但因西方的人口没增加，所以只能发展大机器提高生产力，随之经济效率与军事效率大幅领先东方。而西方民主也是来源于此。因为工业化，大机器制造，生产力需求量大，所以使得农村的人向城市聚集，基于经济需要城市化，而脱离乡村的个人的人生保护很弱，所以便民主化，前期的民主是捣乱的，所以需要完善，而后形成法制化。所以民主是工业化，城市化的产品，而不是前提。 现代民间社会乱象的源头民富差距是资本主义不断发展的天然产物，而中下阶层长期贫困且不可改变，就会长期不满，中下阶层长期不满就会出现民粹主义。在民粹主义出现之后，就会被资本势力或者政治势力利用，比如川普利用民粹上台，川普通过骂华尔街，骂富翁，骂出了美国贫困人民的心声，作为一个压迫工人的富翁，成功地成为了美国工人阶级的代表。香港，台湾的社会乱象亦是如是。 私货：在规则公平本身就是不公平的，同样的国际规则，但是由于体量不同，发展国家根本无法与发达国家同台竞技。同样的，看似公平的当代社会，却发生着很多令人啼笑皆非的现象： 本国财阀最大的投资方是美国，本国不具备反抗驻扎美军的军事能力，财阀与政权民不可分，每一任想做出颠覆的总统都不得好下场。 企业家的亲属渗透到政治文化领域，地区无法产生能威胁财阀现有产业的先进新产业，外表上自称国际金融中心，却多次完美地拒绝以IT，生命科学等为代表的先进领域，高考前三甲的首选居然是牙医。 本国及企业家因为降低风险大量购入美元外汇，却随时遭受美国的贬值威胁。 种种这样的情况与封建时代各朝走向覆灭的本质原因——土地兼并无本质上的区别，只不过是给人民披上了民主与自由的糖衣，本质上还是既得利益者不断蚕食无产阶级的社会价值。如今无法评价好坏，不过阿中同志现在走的这一条，真真是所有国家都没走过的道路。 Bon voyage.]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>学问</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在西装革履过年之后]]></title>
    <url>%2F2019%2F02%2F22%2F%E5%86%99%E5%9C%A8%E8%A5%BF%E8%A3%85%E9%9D%A9%E5%B1%A5%E8%BF%87%E5%B9%B4%E4%B9%8B%E5%90%8E%2F</url>
    <content type="text"><![CDATA[如果没有这种小确幸，人生只不过是干巴巴的沙漠而已。​ —— 村上春树 5……4……3……2……1！新年快乐！那是春晚循例的倒数，是隔壁响起的鞭炮竹声，是纷至沓来的群发祝福提醒。整个中国都沉浸在新一年的喜庆中，至少，听起来确实如此。 不知道从什么时候开始，每年的这个时刻，心里突然会浮起一种名为「硌得慌」的情绪，不是疲惫于过年的种种繁琐，也不是担心各种亲戚长辈的问东问西。你一直想问，为什么别人对过年会那么期待，那么快乐。但其实，那个内心的幽灵真正想问的是：为什么你不像别人那样翘首以待，不像别人那样乐在其中？你很快便不愿深究，害怕与群体文化对抗，害怕心里慢慢失去社会性。 谁也不愿做那群快乐的绵羊中间那只皱眉的。 地球诞生之初并没有定义哪一刻是时间的分割线，各个国家对新年都有不同的定义，倘若我是国王，我会把新年定在冬天，迎接寒冷与苦难是多么具有浪漫主义的成就。如此看来，过年这个仪式对于王国来说还是有莫大的意义的。 过年也好，其他节日也好，于自然界而言毫无价值，仅仅是分割时间的虚线罢了。即便是生老病死这些对于生命而言如此重要的时刻，对于不解风情的自然界来说，也只是无序的随机序列而已。诚然，熵增是世界至高无上的自然规律，泼出去的水永远也不可能回到盆子里，事物的任何发展都是世界随着时间的流逝由秩序流向分散的过程。 直到仪式的出现。 仪式的出现，是人类从自然界生物衍生出文明的标志。人类从无序的世界变迁中发现了感受与意义，生老病死、季节更迭等等在人类的感受力之下产生了新的意义。篝火的舞步，高亢的歌声，使人产生了区别于其他生物的精神力量，而这些精神力量，被编织成了浪漫的人类文明史诗。 仪式感，是一个略带矫情的词。但是正如《小王子》中的狐狸说到，“仪式感就是使某一天与其他日子不同，使某一时刻与其他时刻不同。” 我们大可不必成为羊群中的一员，但我们的一生中是否有某些独特的时刻，就像是天上的一颗星星，任由岁月流逝，你也一样可以很轻易地从回忆的夜幕里找到它，它若隐若现闪烁着的光芒，一定就是你与众不同的一生的意义所在。 「Romantic」的解释是：富有诗意，充满幻想。仪式纪念的也应该是你充满诗意与幻想的时刻。西装革履过年的人，心里一定不是在过年。只要此刻的你是自由的、热情的，哪怕你穿着背心凉鞋去咖啡厅，也一定能找到属于你的仪式感。 因此，喝咖啡前，将杯子放到鼻子下嗅一下咖啡的香气，远比喝咖啡本身来得神圣。]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>蓝杏树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[星星萤火虫绘本]]></title>
    <url>%2F2018%2F04%2F12%2F%E6%98%9F%E6%98%9F%E8%90%A4%E7%81%AB%E8%99%AB%E7%BB%98%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[小时候以为星星是一只一只萤火虫化成的萤火虫命中注定般渴望着月亮彷徨在夜幕中渐明渐暗的光芒是渺渺小小的简简单单的愿望但在小孩心中每一个星辰降落的夜晚都显得那么的神圣 每每云层层叠叠地遮蔽月光那是萤火最躁动的时候它们忽然发现自己离月亮那样的遥远它们慌张地寻找月光留下的蛛丝马迹它们已经不能控制自己 夜晚如海平面般的宁静小小的躯壳内却已波涛汹涌思念在夜里肆意挥霍拍打着礁石，发出哗哗的声音仿佛连沉睡的大地都要唤醒突然崖上的灯塔纷纷亮起笔直的灯光连接了天空与海洋像是温柔的声音，予躁动的心以虔诚的指引 点点微弱的光芒飞向天空在迢遥的旅途中义无反顾都说光是世上最快的速度那么我能早点到你身边吗 当一道道汽笛声从远处传来小孩望着连都市灯光都照不亮的天数着数着，发现星星又多了一颗看！夕暮后的夜空，一闪一闪这本久远的童话般的绘本由萤火虫短暂的一生点缀而成]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>诗篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雨陌生地落在柏油路上]]></title>
    <url>%2F2018%2F03%2F30%2F%E9%9B%A8%E9%99%8C%E7%94%9F%E5%9C%B0%E8%90%BD%E5%9C%A8%E6%9F%8F%E6%B2%B9%E8%B7%AF%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[你似乎可以很轻易地清楚事物变化的因果逻辑，很平静地接受周遭所发生的事情；但在没人的某个时刻，你会突然陷入一种莫名的恐慌，你措手不及，你不了解这种情绪从何而来，到哪里去。 你读很多书，当书本成为了你的知识，但你的心灵并不能接受和理解这些；当书本成为了你心灵的慰藉，但你觉得这些对你毫无裨益。你害怕读书了，你不想听到两个声音在吵架。 于是你采取了一种最为稳妥的行事方式。你把事情小心翼翼地分成若干个节点，对每个节点采取不同选择所造成的后果进行预测。你早已习惯采用风险最少的做法，似乎这让你的理性和感性都能接受。 你终于发现，你习以为常的行事方式根本不是你的本意，仅仅是你对最坏结果做出的妥协。你意识到，这是多么愚蠢与虚伪。你的大脑开始批判，你的内心开始反抗，但是他们批判谁呢，这是他们都接受的，如果非要找一个批判对象，那么又要从大脑内心之外再割裂出一块来。 每个人都是知行合一的。 你一直对此深以为然，如今这些理解都近乎坍塌。或许只有程序才是知行合一的；或许世上所有事物与他人都是知行合一的，除了人自己不是。 不能理解自己的人如何能理解他人。甚至乎当你充满焦虑时写下的东西在若干个小时之后会变得那么的陌生，仿佛是经他人之手写出来的。或许这是由于人面对自己的时候都很脆弱，脆弱到潜意识里不断抗拒承认这就是自己。 你已经开始有所释怀了，脆弱真是最合理的理由，仿佛以上都可以用此解释得酣畅淋漓。你也不必再苦心竭力地谋求答案了，毕竟这会伤到脆弱的自己。 很显然，你不能接受这个结果。你还未能决定要把这克服掉，还是偶尔允许其存在。犹豫不决的时候总是痛的，不过也比麻木要好上一些。且痛且行，不失为一种真切的实感。这种实感，就陪我走上一会吧。]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(译)Kotlin 1.2 Released：Sharing Code between Platforms]]></title>
    <url>%2F2018%2F01%2F15%2F(%E8%AF%91)Kotlin%201.2%20Released%20%20Sharing%20Code%20between%20Platforms%2F</url>
    <content type="text"><![CDATA[译者：团子吃蛋挞&amp;黄志强源地址：https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/ 今天我们正式发布Kotlin1.2。这是一个意义重大的版本，也是将Kotlin推广到现代化应用的各部件开发的关键一步。 在Kotlin1.1版本，我们正式将JavaScript纳入支持，你可以将你的Kotlin代码编译成JS并在浏览器运行。而在Kotlin1.2，你的代码可以在JavaScript和JVM中复用。现在只需要编写一次业务逻辑，代码就能在后端、浏览器前端、Android移动app中复用。我们也正努力开发能让你复用更多代码的库，例如跨平台序列化的库。 Kotlin1.2将集成在本周发布的IntelliJ IDEA 2017.3。如果你正在使用Android Studio或旧版本的IntelliJ IDEA，你可以在Tools | Kotlin | Configure Kotlin Plugin Updates中安装新版本。 本次更新包含了许多外部贡献者的成果，我们也感谢你们反馈和报告的问题，尤其是提交了PR的贡献者。 跨平台项目一个跨平台的项目允许你使用相同的代码库去构建多个层面的应用程序 —— 后端、前端和Android app。这样的项目不仅拥有包含跨平台代码的通用模块，还拥有包含特定平台(JVM或JS)代码与能调用依赖于平台的库的特定平台模块。 要从通用模块中调用特定平台代码，可以使用预定义 - 所有特定平台模块都需要提供实际实现的声明。 此特性的更多的说明，请查看此文档 正如同前面所说的，我们正致力于开发更多的库，供你将业务逻辑迁移到通用模块： kotlin.test能直接在Kotlin1.2中使用，只需写一次测试便可在JVM和JS中运行 kotlinx.html支持-同构渲染——使同样的代码在前后端渲染HTML kotlinx.serialization允许你使用JSON或者ProtoBuf在应用程序的不同层之间序列化Kotlin对象 请注意跨平台项目现在只是一个实验性的特性；这意味着虽然可以正常使用，但我们可能会在后续版本中更改设计（到时我们会提供工具迁移代码的）。 编译的性能优化在1.2版本的开发过程中，我们费尽心思去提升编译的速度。相比于1.1版本，我们达到了接近25%的提升，并且我们看到了能进一步优化的潜力，这将在1.2.x的更新版本中发布。 下图展示了两个使用Kotlin构建的大型JetBrains项目在编译时的时间差异： 其他在语言和标准库方面的改进我们还对语言和标准库进行了一些小改进： 在注解（常量数组）传递多个参数时一个更简洁的语法； lateinit现在支持全局或局部变量了，同时检查lateinit变量是否已经初始化； 智能转换和类型推断在某些情况的改善； 标准库现在可以兼容Java9中引入的拆分包限制 标准库引入了新的kotlin.math包 标准库新增了用于处理队列和集合的函数，其中有一组函数可以将集合或队列分解为可重复固定尺寸的组 更多信息及示例代码，请查看What’s New in Kotlin 1.2文档页面。 走向世界的Kotlin随着今年3月份发布了Kotlin1.1，Kotlin在全世界范围内受到了巨大的关注，这在KotlinConf上达到最高峰，这次会议于11月2、3号在旧金山举行，总共有12000名与会者。本次会议我们作了全程记录，视频在这里。 Kotlin现在已经受到了Android开发的官方支持，并且集成到Android Studio3.0中，同时Google也提供了示例和设计规范。据统计，已有超过17％的Android Studio 3.0项目在使用Kotlin了，其中包括来自热门初创公司和500强公司的许多应用程序。 在服务器端，Spring Framework 5.0已经支持许多Kotlin的特性了，Vert.x也从3.4.0版本开始支持Kotlin。此外，Gradle现在也开始支持Kotlin DSL，Gradle Kotlin DSL项目正以可观的速度迈向1.0版本。 GitHub上开源项目的Kotlin代码行数已经超过了2500万。 在Stack Overflow上，Kotlin是增长最快，也是最少被讨厌的语言之一。 Kotlin社区的发展速度也快得让人惊叹。现已有100多个用户群体遍布世界各地，除开我们无法追踪到的讨论，就我们所知而绘成的讨论分布图能让你了解到世界哪些地方正在使用Kotlin。 同时也有越来越多的书籍(包括我们的”Kotlin in Action”已被译成英语、俄语、日语、中文、葡萄牙语)、在线课堂、教程和其他资料供初学者学习。 与开发团队交流：网络研讨会和Reddit AMA为了分享更多新版本信息，我们计划于12月7日晚上6点举办Kotlin1.2跨平台项目的网络研讨会。名额有限，请及时注册！ Kotlin团队也会在12月5日在Kotlin Reddit上进行AMA(问答会)，讨论将于中午开始，与你度过接下来的24小时。 如何升级与往常一样，你可以在try.kotlinlang.org中尝试新版本。 在Maven，Gradle和npm：请更新编译版本及标准库版本号到1.2.0，详细请查看文档。 在Intellij IDEA：2017.3已集成了1.2版本，旧版本可以通过安装或更新Kotlin插件来获取最新版本。 在Android Studio：请通过Plugin Manager安装或更新你的插件。 在Eclipse：通过Marketplace安装插件。 Github发布页可下载最新命令行编译器。 关于兼容性：Kotlin1.2版本及其标准库是向前兼容的，在1.0或1.1版本下成功编译并运行的代码也能运行在1.2上。考虑到一些大型团队需要逐渐推进更新，我们提供了一些编译器开关以便禁用部分新特性。如果遇到问题，请参考这里。 请尽情享受Kotlin！]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小南瓜鸡蛋杯宣传视频]]></title>
    <url>%2F2018%2F01%2F13%2F%E5%B0%8F%E5%8D%97%E7%93%9C%E9%B8%A1%E8%9B%8B%E6%9D%AF%E5%AE%A3%E4%BC%A0%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[STAFF：拍摄 甘希明&amp;美逗摄影脚本 黄志强剪辑 黄志强后期 黄志强]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(译)Kotlin 1.2 Beta is out]]></title>
    <url>%2F2018%2F01%2F13%2F(%E8%AF%91)Kotlin%201.2%20Beta%20is%20out%2F</url>
    <content type="text"><![CDATA[译者：团子吃蛋挞&amp;黄志强源地址：https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/ 我们很高兴地发布Kotlin 1.2的Beta版本。借此发布，我们将揭示Kotlin 1.2的主要新特性——跨平台项目的实验性支持。此外，Kotlin native和标准库功能也开发完毕 - 所有计划于Kotlin 1.2实现的新功能都已完备。现在正是你们反馈新改动的绝佳时期 - 因为我们仍然有时间对反馈加以考虑并调整1.2终版的设计。 在工具方面，Kotlin 1.2 Beta包含了与最近发布的1.1.50更新相同的一系列特性。该测试版兼容从2016.3至2017.3的所有IntelliJ IDEA版本以及Android Studio 2.3与3.0。 从1.2-M2开始，所有的更新日志都可以在这里找到。以下是重大改动： 跨平台项目跨平台项目是Kotlin 1.2的一个新的实验性功能，允许你在Kotlin支持的目标平台复用代码-JVM，JavaScript以及(未来会支持的)Native。在跨平台项目中，你提交的平台间的通用代码将放入通用模块，连同平台相关的部分一并放入依赖于平台的特定模块中。当您为一个特定的平台编译项目，公用部分和平台特定部分的代码都会生成出来。 跨平台项目所支持的一个关键特性是通过预期和实际的声明来表现通用代码与平台特定部分的依赖关系。预期声明定义API（类，接口，注释，顶层声明等）。实际声明则是该API在平台相依的实现，或是在外部库中引用现有实现的typealias： 1234567891011121314// Common codeexpect fun hello(world: String) expect class URL(spec: String) &#123; open fun getHost(): String open fun getPath(): String&#125; // JVM codeactual fun hello(world: String) &#123; println("Hello JVM $world")&#125; actual typealias URL = java.net.URL 若想得到更多跨平台项目的信息，请查看此文档。 如果你在发布之前就已经尝试了该功能，也请注意及时更新您的项目：header和impl关键字已重命名为expect和actual。若想代码自动更新，请使用IntelliJ IDEA中的Analyze | Cleanup Code。 语言和编译器注释中的数组字面值Kotlin 1.2有一个新的语言特性：对注释中文字常量数组的支持。现在，不需要类似@CacheConfig(cacheNames = arrayOf(&quot;books&quot;, &quot;default&quot;))这样的写法了，你只需要这样简单地表示： @CacheConfig(cacheNames = [&quot;books&quot;, &quot;default&quot;]) 其实早在Kotlin 1.2之前的里程碑版本中你已经可以这样做了。但在1.2 Beta中，我们更加统一了语法并允许使用常量数组和可变参数： @RequestMapping(value = [&quot;value1&quot;, &quot;value2&quot;], path = [&quot;path1&quot;, &quot;path2&quot;]) 为了实现这种改动，我们决定对常规方法调用和注释中，使用命名参数和可变参数的语法做一些调整。你可能会感到惊讶，因为在Kotlin 1.1中，当使用命名参数语法调用可变参数方法时，可以传递单个参数作为一个立即值： 123fun foo(vararg strs: String) &#123; ... &#125; foo(strs = "abc") 这样将&quot;abc&quot;赋值于strs是不太恰当的，这导致我们在将整个数组作为命名参数传递时得使用展开运算符： foo(strs = *arr) 我们很想可以写成foo(strs = arr)，但考虑到兼容性，它需要一个逐步迁移的过程，所以在1.2版本里面，我们弃用了foo(strs = &quot;abc&quot;)这样的写法。取而代之的是（这种用法应该很少见到），你可以使用展开和arrayOf方法： foo(x = *arrayOf(&quot;abc&quot;)) 我们计划实现一个编译器优化方案来消除在这样的调用下对于数组的分配与复制。 由于注释是一个更受限制的上下文，所以我们可以跳过一步迁移，那样你就可以简单地把值放入一个字面值数组，而不需要扩展运算符： 1234annotation class Foo(vararg value: String) @Foo(value = "a") // deprecated@Foo(value = ["a"]) // correct 在You Track issue可以看到更多相关信息。 lateinit改进我们添加了一个新的反射API，这允许您检查一个lateinit变量是否已被初始化： 1234567lateinit var file: File // ... if (::file.isInitialized) &#123; ...&#125; 这是该KEEP提议的一部分实现，剩下的部分（析构的方法）则暂时推迟到1.3。 此外，lateinit修饰符现在可以用在全局属性和局部变量上了。举个例子，当你初始化一个对象图，在图中对象的属性之间有一个循环依赖关系的时候（比如，当lambda作为一个构造函数的参数让一个对象引用另一个对象的时候，必须在传递之后才定义），局部变量便可以使用了： 12345678910111213fun test() &#123; lateinit var x: Component // inject takes a lambda which must return the Component though val injector = inject( ..., componentProvider = &#123; x &#125;, ... ) // Initialization is only possible via injector, once it has been run x = injector.createComponent()&#125; 更多详细信息，请查看KEEP。 绑定方法引用的改进现在，你可以把类似this::foo这样的引用方法中的this 省略掉，直接写成::foo。在之前只有全局引用的时候才能省略。更多信息，请查看YouTrack issue。 类型推断的改进Kotlin编译器现在可以使用类型推断中的类型转换信息。当调用了一个返回T且转换为特定类型Foo的泛型方法，编译器现在可以知道这个泛型绑定的是Foo类型。这对于Android开发人员十分重要，因为编译器在Android API26中可以正确分析findViewById了： val button = findViewById（R.id.button）as Button 由于该方法已被改为&lt;T extends View&gt; T findViewById(int id)，因此Kotlin 1.1已不支持在这种调用中推断T类型参数。更多信息，请查看YouTrack issue。 警告视为错误现在编译器提供了一个将所有警告视为错误的选项。在命令行或下面的Gradle代码片段中使用-Werror： 123compileKotlin &#123; kotlinOptions.warningsAsErrors = true&#125; Smart cast的改进Smart cast现在能用在subjects of safe casts了： 123456fun foo(x: Foo?) &#123; val b = (x as? SubClass)?.subclassMethod1() if (b != null) &#123; x.subclassMethod2() // x is smart cast to SubClass &#125;&#125; 另外，以前只允许在lambda之前修改的的var变量现在能在其中执行Smart cast了： 12345678var x: String? = nullif (flag) x = "Yahoo!" run &#123; if (x != null) &#123; println(x.length) // x is smart cast to String &#125;&#125; 枚举中的嵌套类枚举内的嵌套类现在已经被弃用；解决方案为将class标记为inner。 标准库分包的兼容性Kotlin标准库现在完全兼容Java 9的模块系统，Java 9禁止分包（多个jar文件在同一个包中声明类）。为了支持分包，我们创建了新的kotlin-stdlib-jdk7和kotlin-stdlib-jdk8，取代了旧的kotlin-stdlib-jre7和kotlin-stdlib-jre8。其中的声明在kotlin的同名包下是可见的，但是由于我们对编译器添加了黑魔法，这在Java的不同名包下也是可见的。因此，这种切换不需要对源代码进行任何更改。 为确保与新模块系统的兼容性，我们做出的另一个改动是从kotlin-reflect库中移除kotlin.reflect包中已经弃用的声明。这些声明需要在kotlin.reflect.full包中使用，这在Kotlin 1.1中就已经支持了。 kotlin.mathkotlin.math是Kotlin 1.2标准库中的一个新包，允许您在跨平台代码中执行数学运算。在1.2-Beta中，我们对它进行了一些改进： 现在支持反双曲函数（asinh，acosh，atanh） 在1.2-M2中添加的浮点数二进制表示（toBits，nextUp等）相关的函数现在可用于JavaScript 对JavaScript中polyfills精确度的改进 发布前的注意事项与其他里程碑版本一样，我们对新语言和库的相关功能不保证向后兼容性。在1.2的里程碑版本中引入的任何内容在1.2终版之前可能会发生变化。一旦RC版确定，在此之前版本的编译文件将被编译器清理，你需要重新编译1.2-Mx或1.2-Beta所编译过的文件。 但是，这不会影响由1.1.x和之前release版本编译的代码。 如何更新通过Maven / Gradle：在构建脚本和项目仓库中添加http://dl.bintray.com/kotlin/kotlin-eap-1.2；使用1.2.0-beta-31作为编译器插件和标准库的版本号。 通过IntelliJ IDEA：工具→Kotlin→配置Kotlin插件更新，在更新下拉列表中选择“Early Access Preview 1.2”，然后点击检查更新。命令行编译器可以从GitHub release page下载。 通过try.kotlinlang.org：使用右下角的下拉列表将编译器版本更改为1.2（即将实现）。]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(译)Kotlin 1.2 M2 is out]]></title>
    <url>%2F2017%2F09%2F10%2F(%E8%AF%91)Kotlin%201.2%20M2%20is%20out%2F</url>
    <content type="text"><![CDATA[译者：团子吃蛋挞&amp;黄志强源地址：https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-2-m2-is-out/ 我们很高兴地公布Kotlin 1.2的第二个里程碑版本。该版本的重点在于Kotlin编译器和工具的稳定性与bug修复，以及Kotlin标准库的改进。此外还包含了很多即将发布的Kotlin 1.1.4所具备的工具特性。 如果能有您对新特性或者运行中所遇到的任何问题的反馈，我们将非常感谢。 从1.2 M1开始，完整的更新日志可以在这里查看，重要的变更在下面列出： 编译器重大更改：Java默认方法调用到目前为止，Kotlin的接口成员在jvm 1.6重写Java默认方法的时候，如果通过super调用父类方法，将会得到一个警告子类对Java默认方法的调用在JVM target 1.6已被弃用。请使用-jvm-target 1.8重新编译。在1.2-M2版本中，我们将警告变更为错误，因此此类代码将需要使用-jvm-target 1.8编译。 标准库修正windowed/pairwise操作我们听取了大家KEEP-11中关于chunked/windowed/pairwise函数的反馈，并且在1.2-M1里程碑版中发布了预览功能，在这基础上，我们还进行了如下改动： windowed函数的自增变量现在默认为1。同时还增加了一个额外的可选参数partialWindows，用于控制不完整的窗口的结束处理流程。默认值为false，表示不完整的窗口不会保留。 pairwise函数名让人摸不着头脑，不知道它是如何配对元素的。所以我们新命名为zipWithNext，这更清楚地表明这函数会把集合中每个元素和下一个元素都压缩一次。 标准库中的通用数学运算长期以来人们一直希望标准库KT-4900能够支持数学运算。但目前我们只能借助JVM平台上的java.lang.Math数学函数与常量，和JS平台上会把原生JS数学函数暴露给Kotlin的kotlin.js.Math。 但现在我们在kotlin.math包中引入了下述几组API： 常数：PI和E； 三角函数：cos，sin，tan和反三角函数acos，asin，atan，atan2； 双曲函数：cosh，sinh，tanh； 幂函数：pow（扩展函数），sqrt，hypot，exp，expm1； 对数函数：log，log2，log10，ln，ln1p； 取整函数： ceil，floor，truncate，round（奇进偶取）函数； roundToInt，roundToLong（半整数）扩展函数； 符号和绝对值： abs 和 sign 函数； absoluteValue和sign扩展属性； withSign扩展函数； 比较两个值的max和min函数； 二进制表示法： ulp扩展属性； nextUp，nextDown，nextTowards扩展函数； toBits，toRawBits，Double.fromBits（都在kotlin包中）。 Float参数也可用相同的函数集（常数除外）。 上述函数大部分（二进制表示法除外）在JS也可以使用，因此两个平台可以通用一套计算代码。 预发行说明 与其他里程碑版本一样，对于新的语言和标准库特性，我们不会提供向后兼容的保证。1.2最终版之前，新引入的内容都尙处于更改之中。当我们最终RC时，预发行版本的所有二进制文件将被编译器认为不合法：您需要重新编译之前1.2-Mx编译的所有内容。 但是，使用1.1.x或更早的版本编译的代码则不需要重新编译也可以完美运行。 体验新版在Maven / Gradle：添加http://dl.bintray.com/kotlin/kotlin-eap-1.2作为构建脚本和项目的库；然后把编译插件和标准库的版本号修改为1.2-M2。 在IntelliJ IDEA：打开Tools → Kotlin → Configure Kotlin Plugin Updates，接着在Update channel下拉列表中选择”Early Access Preview 1.2”，然后点击Check for updates。 命令行编译器可以从Github发布页面下载。 在try.kotlinlang.org：在右下角的下拉列表将编译器版本更改为1.2-M2（即将开放）。]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(译)KotlinConf – Speaker List Announced]]></title>
    <url>%2F2017%2F07%2F24%2F(%E8%AF%91)KotlinConf%20-%20Speaker%20List%20Announced%2F</url>
    <content type="text"><![CDATA[译者：团子吃蛋挞&amp;黄志强源地址：https://blog.jetbrains.com/kotlin/2017/07/kotlinconf-speaker-list-announced/ 仍未到11月吗？ 距离KotlinConf 2017只剩100多天了，我们在此非常激动地宣布我们邀请了48位十分出色的讲师发表演说！能有这样优秀的嘉宾与公司团队代表Kotlin社区，我感到非常兴奋。 一般抢先票在首轮抢先注册活动之后也已经售罄了，普通门票尚在发售中，售完即止。如果你想参加KotlinConf，也请马上注册吧，否则你将错失机会。 温馨提示，KotlinConf将于11月2-3日在美丽的加利福尼亚州旧金山27码头举行。届时JetBrains团队和充满激情的社区讲师将分享他们关于Kotlin的知识，经验和理念。 为期两天的学习，交流会与更多的乐趣在等待着你。立刻注册吧！ 我们期待着在今秋的旧金山与你相见！]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(译)Kotlin Future Features Survey Results]]></title>
    <url>%2F2017%2F07%2F23%2F(%E8%AF%91)Kotlin%20Future%20Features%20Survey%20Results%2F</url>
    <content type="text"><![CDATA[译者：团子吃蛋挞&amp;黄志强源地址：https://blog.jetbrains.com/kotlin/2017/06/kotlin-future-features-survey-results/ 最近令人激动的事情层出不穷，我们不得不怀着抱歉的心情推迟公布Future Features Survey的结果。但迟到总比不到要好，本博客总结了我们在调查中获知的内容。 总的来说，Future Features Survey从四月份开始，一共收到约850份答复。在此我们要感谢所有参与者！ 调查结果原始的统计数据（匿名）可在这里获得。 我们的议题有二： 提名三个最受你期待的特性 提出一项你认为不需要的特性（可选） 你可以在这里查看提名features的名单。 我们总共收到852份答复（某些是白卷），其中大多数人都用完了3个实用特性的提名名额，而约有300多人放弃了对不受欢迎特性的提名。 这是汇总的结果（按受欢迎程度排名）： 由上图可知，最受欢迎特性的依次为：“Collection literals”, “SAM conversions for Kotlin interfaces”与“Truly immutable data” 而“Private members accessible from tests”似乎最具争议，108票赞同与120票反对。这可以理解，毕竟可测试性设计是被广泛认可的惯例。 但我对“Overloadable operators | and &amp;”的提名结果感到些许困惑，有46票赞成与50票反对，而我看不出这个特性所带来的任何坏处，请在文章评论区分享你这样选择的原因。 这是最不受欢迎特性的排名： 需要说明的是，“Optional commas”和“Optional trailing commas”本应是两个选项，我们错误地把他们放在了同一个feature中，所以引起了难以解读的结果。 另外我们还忘了在调查中添加“Ternary conditional operator”，在我意识到的时候已经太晚了，很抱歉各位。我们已经明白这个功能会有很大需求，会持续进行研究的。 但最奇怪的是，这次调查的结果与在Kotlin 1.1发布会中进行的调查截然不同： 我怀疑是人们看了上次投票后产生了某些偏见，但这很难确定，也可能是另外的因素，例如线下与线上的参与者本身就具有很大的差异性。 结论已明确方向的三个特性是： Collection literals SAM conversions for Kotlin interfaces Truly immutable data 相比之下其余的features只收到了较少的投票。Truly immutable data饱受期待，但真的很难实现，这里我们没法给予承诺。而另外两项在不久的将来都可以实现，multi-catch看起来也不错。总而言之，我们将在工作计划中重视这次调查的结果。 免责声明：如上所述，我们并没有承诺在特定的时间内完成任何这些功能。我们很关心用户需要什么，但不能预先承诺任何东西。因为在知道这些功能是否确切（并且优雅地）适合这种语言之前，我们都需要进行慎重的设计工作。]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夏の音：ギタとひぐらしと少女のうた]]></title>
    <url>%2F2017%2F07%2F16%2F%E5%A4%8F%E3%81%AE%E9%9F%B3%EF%BC%9A%E3%82%AE%E3%82%BF%E3%81%A8%E3%81%B2%E3%81%90%E3%82%89%E3%81%97%E3%81%A8%E5%B0%91%E5%A5%B3%E3%81%AE%E3%81%86%E3%81%9F%2F</url>
    <content type="text"><![CDATA[朝、ひぐらしの鳴き声と共に起きる 夜、ひぐらしの鳴き声と共に眠る 夏が、いつの間に、来たろ。部屋外の木や、草や、いつの間に、そんなに青いになったろ。熱が、山のように重い、ぼくを迫ている。けど、空の色、木色、どこにもある蜩の音、まさに、世界が子供のような、「私は生きている！」と僕を叫びている。生き生きとするな、世界は。 夏と言うと、もちろん今は少女音とギタの季節だ！JPOPや、ロックや、幻想を満たす色々な唄が何の拘束もない、自然で自由な生活を僕の頭に届ける。僕のプログラム中のコードも、綺麗になった。「コードは芸術だ。」突然、そう思いをする。 「君が好きだから 君の大好きな夏を好きになった 焼けるような日差しに腰を下ろして 溶けて流れた虹に笑った」 こんの生活が欲しいな、海風に乗って夏の恋の甘さを。]]></content>
      <categories>
        <category>日本語</category>
      </categories>
      <tags>
        <tag>日本语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[狂赋]]></title>
    <url>%2F2017%2F07%2F15%2F%E7%8B%82%E8%B5%8B%2F</url>
    <content type="text"><![CDATA[狂者，气也。 腹满书而生气，气饱腹而自溢。溢者，狂也。大凡狂者，皆负才情。小才者狂，芥而锐目，倾国色之牡丹，决桎梏之洪流，落逸禽之飞矢，幻灯红之迷昙；大才者狂，瀚而磅礴，抟扶摇之棕榈，纳百川之沉渊，覆天地之浮云，忘光阴之大椿。小狂狂而毕露，鹗之眸，豹之尾；大狂狂而尽敛，鹏之羽，龟之甲。是故小才者，“狂”之左，兽之利器；大才者，“狂”之右，王之霸气。 夫人之气宇，修于内而发于外，生于书而广于己。汲百家之精髓，融一身之秀气，生于混沌，化于雏形，表于世间。忽察人之修行，莫如己高；世之涵养，莫如己深，便滋狂傲之气，视弱者为蝼蚁，以自身为独秀，著狂论以傲世，搁礼仪于不顾，其小狂已成形。既而似韦编三绝，汗牛充栋，又品察人间情愫，世态百味，便始参天道，自成一体，饱藏宇宙天机，吐纳山川灵气，洞察时间轮回，包容天地万物，融有形于无形，化小狂为大狂。由是利气既褪，霸气已成。 故凡学者必有气，气者必有狂，气生于悟道，狂生于赛道。广义而论，道有生于市者，有生于武者，有生于书者。故亦有商之气，将之气，儒之气。朱门肉臭谓之小狂，玉堂金马谓之大狂；荐守街亭谓之小狂，喝断长坂谓之大狂；笑说鸡肋谓之小狂，客居五柳谓之大狂。大狂者，必立其巅峰，俯仰天地，如君临天下，唯我独尊，又于其处世腹有海量，不为诽言所怒，不为危情所动。以凡人之躯，拥圣贤之灵，此之谓“半仙”。 夫狂者至尊至傲。察俗夫之偶运兮，嗤之以鼻；逢屈身之金帛兮，不动如山；遭喧尘之不解兮，隐耕桃林，非退也，不屑耳。然是人不屑者众，狂者寡，此余之大恨哉。 二〇一一年八月二十日于顺德 无瘾诗人]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>骈文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ゼロから日本語を勉強しましょう！]]></title>
    <url>%2F2017%2F07%2F15%2F%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%8B%89%E5%BC%B7%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%EF%BC%81%2F</url>
    <content type="text"><![CDATA[七月十四日/晴れ これはおれの気まぐれかもしれない。まあ、とりあえず、おれの日本語学習プログラムは復活だ！めでたしめでたし。 教材は「みんなの日本語」を選べます。「新标日」と「新编日语」両方も勉強してみました、前者の文法が変、後者の文法はただしがつまらないです（さすが大学の教材）。それで、「みんなの日本語」を試しましょう。 日本語の日記もよく書くしよ、難易度高いけど、頑張ってみよう！]]></content>
      <categories>
        <category>日本語</category>
      </categories>
      <tags>
        <tag>日本语</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[少年守志说]]></title>
    <url>%2F2017%2F07%2F12%2F%E5%B0%91%E5%B9%B4%E5%AE%88%E5%BF%97%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[守志如填海，未见其满而日有所满；辍志如易途，日有所行而未见其远。然时之少年，辍志者众，守志者寡。人是如此，国何以堪！逢五四之佳节，得总理之劝语，概时下之短志，寄文章以励子。 少年守志，曦升碧瑶之霄；中年守志，日受骄云之蔽；老年守志，夕落东去之江。夫少年者，其心也万壑，其力也金刚，其智也灵狐，其气也长江。少不守志，更待何时？ 然，心怀万壑则易好高骛远；力赛金刚则易不分放矢；智比灵狐则易恃才傲物；气若长江则易不拘礼节。是故少年常立志者众，立长志者寡。少年守志者，心虽高而专一，力虽沛而有度，智虽明而谦逊，气虽浩而收敛。 年少则利于耐守志之艰难，守志则利于改年少之浮夸。年少守志，不亦齐美乎？ 然守志非易事。 伴山脚仰其入云而未见其顶！能不骇而却步？攀山腰水囊已空而未见溪泉，能不疲而止步？爬山颈寂寥已久而未见人影，能不忧而停步？守志难，难于上青天。伟长十八学理，八十寒暑挑灯苦读；自清十二成文，二十春秋独自笔耕。嵇康恨而绝交，文举固而拒曹，鹏举愤而雪耻，渊明适而归田。孔丘贫教，史迁辱书。洛神之绣虎，彦和之雕龙；晋士特奇，可比一斑之豹；唐儒博识，堪比五总之龟。 其山虽高，登其峰者未见其少；人虽非少，登峰之径未见其顺。此等人也，年少而起，耄耋而不惜。仰其峰高，骇而不弃！耐其水枯，累而不弃！苦其寂寞，忧而不弃！守志非易事，其长，苦，寂，无边，无路，无止，唯守一字，方能克之。 少年守志则国生根，愈根深而蒂固；少年辍志则国弃羽，欲高飞而无力。昔李斯《谏逐客书》道河海不择细流，故能就其深；今启超《少年说》道少年强则国强，少年富则国富。昔国之初长，只因昔之少年守志；而国之复兴，还需今之吾辈守志。吾之最高志乃国之志，吾守志后方能成国志。成国志者，非主席，非总理，少年也。 少年者，当以披荆斩棘无所惧怕之勇，隳山碎岩所向披靡之力，熊咆虎啸龙吟凤鸣之势，甘受疾苦永不言弃之心，守乘风破浪驰骋天下之志，守修身齐家淡泊名利之志，守治国安国富国强国之志！ 二〇一一年于顺德一中]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>骈文</tag>
      </tags>
  </entry>
</search>